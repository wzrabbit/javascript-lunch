(()=>{"use strict";var n={257:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([n.id,"@import url(https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/static/pretendard.css);"]),i.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  font-family: 'Pretendard';\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  font-family: sans-serif;\n  font-size: 16px;\n  height: 100%;\n}\n\n/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --restaurant-item-hover-color: #ec4a0a20;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n/* GNB ********************************************/\n.gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n\n/* 음식점 목록 *****************************************/\n\n/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 24px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n\n/* 음식점 목록 */\n.restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n\n.restaurant {\n  position: relative;\n  display: flex;\n  align-items: flex-start;\n  padding: 16px 8px;\n  border-bottom: 1px solid #e9eaed;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.category-icon {\n  width: 36px;\n  height: 36px;\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n\n.restaurant__link {\n  margin-top: 10px;\n  display: none;\n  text-decoration-color: black;\n  color: black;\n  font-weight: 600;\n}\n\n/* 음식점 추가 모달 *****************************************/\n.modal {\n  position: fixed;\n  display: flex;\n  flex-direction: column-reverse;\n  transition: 0.2s;\n\n  bottom: -1000px;\n}\n\n.modal-backdrop {\n  position: fixed;\n  display: none;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n  backdrop-filter: blur(8px);\n}\n\n.modal.modal--open {\n  bottom: 0;\n}\n\n.modal--open .modal-backdrop {\n  display: block;\n}\n\n.modal-container {\n  position: fixed;\n  width: 100%;\n\n  padding: 32px 16px;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n}\n\n.modal-title {\n  margin-bottom: 36px;\n}\n\n.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 36px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: '*';\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name='name'],\ninput[name='link'] {\n  height: 44px;\n}\n\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n\n/* 2단계 이후 신규 속성 정의 *****************************************/\n.restaurant {\n  cursor: pointer;\n  transition: 0.2s;\n}\n\n.restaurant:hover {\n  background-color: var(--restaurant-item-hover-color);\n}\n\n#restaurant-info-modal-contents .restaurant {\n  flex-direction: column;\n  border-bottom: none;\n}\n\n#restaurant-info-modal-contents .restaurant:hover {\n  background-color: transparent;\n  cursor: default;\n}\n\n#restaurant-info-modal-contents .restaurant__category {\n  margin-bottom: 10px;\n}\n\n#restaurant-info-modal-contents .restaurant__distance.text-body {\n  margin-bottom: 10px;\n}\n\n#restaurant-info-modal-contents .restaurant__name.text-subtitle {\n  font-size: 20px;\n  font-weight: 800;\n}\n\n#restaurant-info-modal-contents .restaurant .restaurant__description {\n  -webkit-line-clamp: 15;\n}\n\n#restaurant-info-modal-contents .restaurant .restaurant__link {\n  display: block;\n}\n\n.favorite-icon {\n  position: absolute;\n  right: 10px;\n  top: 20px;\n  cursor: pointer;\n}\n\n.favorite-menu {\n  display: flex;\n  padding: 0 16px 0 16px;\n}\n\n.favorite-radio {\n  display: block;\n  font-size: 20px;\n  text-align: center;\n  width: 100%;\n  font-weight: 600;\n  height: 70px;\n  padding: 32px 0 16px 0;\n  border-bottom: 3px solid var(--grey-200);\n  color: var(--grey-400);\n  transition: 0.2s;\n  cursor: pointer;\n}\n\ninput[type='radio']:checked + .favorite-radio,\n.favorite-radio:hover {\n  border-bottom-color: var(--primary-color);\n  color: var(--primary-color);\n}\n\n.error-item {\n  display: flex;\n  gap: 5px;\n  opacity: 0;\n}\n\n.error-image {\n  width: 20px;\n  height: 17px;\n  margin-top: 1.5px;\n}\n\n.error-text {\n  display: inline-block;\n  color: var(--primary-color);\n  font-weight: 600;\n  margin-bottom: 10px;\n}\n","",{version:3,sources:["webpack://./templates/style.css"],names:[],mappings:"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",sourcesContent:["@import url('https://cdn.jsdelivr.net/gh/orioncactus/pretendard/dist/web/static/pretendard.css');\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  font-family: 'Pretendard';\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  font-family: sans-serif;\n  font-size: 16px;\n  height: 100%;\n}\n\n/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --restaurant-item-hover-color: #ec4a0a20;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n/* GNB ********************************************/\n.gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n\n/* 음식점 목록 *****************************************/\n\n/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 24px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n\n/* 음식점 목록 */\n.restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n\n.restaurant {\n  position: relative;\n  display: flex;\n  align-items: flex-start;\n  padding: 16px 8px;\n  border-bottom: 1px solid #e9eaed;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.category-icon {\n  width: 36px;\n  height: 36px;\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n\n.restaurant__link {\n  margin-top: 10px;\n  display: none;\n  text-decoration-color: black;\n  color: black;\n  font-weight: 600;\n}\n\n/* 음식점 추가 모달 *****************************************/\n.modal {\n  position: fixed;\n  display: flex;\n  flex-direction: column-reverse;\n  transition: 0.2s;\n\n  bottom: -1000px;\n}\n\n.modal-backdrop {\n  position: fixed;\n  display: none;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n  backdrop-filter: blur(8px);\n}\n\n.modal.modal--open {\n  bottom: 0;\n}\n\n.modal--open .modal-backdrop {\n  display: block;\n}\n\n.modal-container {\n  position: fixed;\n  width: 100%;\n\n  padding: 32px 16px;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n}\n\n.modal-title {\n  margin-bottom: 36px;\n}\n\n.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 36px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: '*';\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name='name'],\ninput[name='link'] {\n  height: 44px;\n}\n\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n\n/* 2단계 이후 신규 속성 정의 *****************************************/\n.restaurant {\n  cursor: pointer;\n  transition: 0.2s;\n}\n\n.restaurant:hover {\n  background-color: var(--restaurant-item-hover-color);\n}\n\n#restaurant-info-modal-contents .restaurant {\n  flex-direction: column;\n  border-bottom: none;\n}\n\n#restaurant-info-modal-contents .restaurant:hover {\n  background-color: transparent;\n  cursor: default;\n}\n\n#restaurant-info-modal-contents .restaurant__category {\n  margin-bottom: 10px;\n}\n\n#restaurant-info-modal-contents .restaurant__distance.text-body {\n  margin-bottom: 10px;\n}\n\n#restaurant-info-modal-contents .restaurant__name.text-subtitle {\n  font-size: 20px;\n  font-weight: 800;\n}\n\n#restaurant-info-modal-contents .restaurant .restaurant__description {\n  -webkit-line-clamp: 15;\n}\n\n#restaurant-info-modal-contents .restaurant .restaurant__link {\n  display: block;\n}\n\n.favorite-icon {\n  position: absolute;\n  right: 10px;\n  top: 20px;\n  cursor: pointer;\n}\n\n.favorite-menu {\n  display: flex;\n  padding: 0 16px 0 16px;\n}\n\n.favorite-radio {\n  display: block;\n  font-size: 20px;\n  text-align: center;\n  width: 100%;\n  font-weight: 600;\n  height: 70px;\n  padding: 32px 0 16px 0;\n  border-bottom: 3px solid var(--grey-200);\n  color: var(--grey-400);\n  transition: 0.2s;\n  cursor: pointer;\n}\n\ninput[type='radio']:checked + .favorite-radio,\n.favorite-radio:hover {\n  border-bottom-color: var(--primary-color);\n  color: var(--primary-color);\n}\n\n.error-item {\n  display: flex;\n  gap: 5px;\n  opacity: 0;\n}\n\n.error-image {\n  width: 20px;\n  height: 17px;\n  margin-top: 1.5px;\n}\n\n.error-text {\n  display: inline-block;\n  color: var(--primary-color);\n  font-weight: 600;\n  margin-bottom: 10px;\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var l=n[s],c=r.base?l[0]+r.base:l[0],d=o[c]||0,A="".concat(c," ").concat(d);o[c]=d+1;var f=e(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var u=a(p,r);r.byIndex=s,t.splice(s,0,{identifier:A,updater:u,references:1})}i.push(A)}return i}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=e(o[i]);t[s].references--}for(var l=r(n,a),c=0;c<o.length;c++){var d=e(o[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=l}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return n[r](o,o.exports,e),o.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),r=e(795),a=e.n(r),o=e(569),i=e.n(o),s=e(565),l=e.n(s),c=e(216),d=e.n(c),A=e(589),f=e.n(A),p=e(257),u={};u.styleTagTransform=f(),u.setAttributes=l(),u.insert=i().bind(null,"head"),u.domAPI=a(),u.insertStyleElement=d(),t()(p.Z,u),p.Z&&p.Z.locals&&p.Z.locals,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p;const h=n=>{const t=document.querySelector(n);if(!(t instanceof HTMLElement))throw Error("요소를 불러오는 데 실패했습니다. 페이지를 새로고침 해 주세요.");return t};var m,E,g,v,B,w=function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,e):a?a.value=e:t.set(n,e),e},C=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};E=new WeakMap,g=new WeakMap,m=new WeakSet,v=function(){C(this,E,"f").innerHTML='\n      <header class="gnb">\n        <h1 class="gnb__title text-title">점심 뭐 먹지</h1>\n        <button type="button" class="gnb__button" id="header-add-button" aria-label="음식점 추가">\n          <img src="./add-button.png" alt="음식점 추가" />\n        </button>\n      </header>'},B=function(){h("#header-add-button").addEventListener("click",(()=>{C(this,g,"f").onHeaderAddButtonClicked()}))};var b,y,x,k,M,T,_=function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,e):a?a.value=e:t.set(n,e),e},I=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};y=new WeakMap,x=new WeakMap,b=new WeakSet,k=function(){h("#category-filter").addEventListener("change",(n=>{if(n.target instanceof HTMLSelectElement){const t=n.target.value;I(this,x,"f").onFilterByChange(t)}})),h("#sorting-filter").addEventListener("change",(n=>{if(n.target instanceof HTMLSelectElement){const t=n.target.value;I(this,x,"f").onSortByChange(t)}})),h("#favorite-filter-all").addEventListener("click",(n=>{n.target instanceof HTMLInputElement&&(I(this,x,"f").onFavoriteByChange("all"),I(this,b,"m",M).call(this,"open"))})),h("#favorite-filter-favorite").addEventListener("click",(n=>{n.target instanceof HTMLInputElement&&(I(this,x,"f").onFavoriteByChange("favorite"),I(this,b,"m",M).call(this,"close"))}))},M=function(n){h("#restaurant-filter-container").style.display="open"===n?"flex":"none"},T=function(){I(this,y,"f").innerHTML='\n      <section class="restaurant-favorite-container">\n        <div class="favorite-menu">\n          <input type="radio" id="favorite-filter-all" name="favorite" value="all" checked hidden />\n          <label class="favorite-radio" for="favorite-filter-all">모든 음식점</label>\n          <input type="radio" id="favorite-filter-favorite" name="favorite" value="favorite" hidden />\n          <label class="favorite-radio" for="favorite-filter-favorite">자주 가는 음식점</label>\n        </div>\n      </section>\n      <section class="restaurant-filter-container" id="restaurant-filter-container">\n        <select name="category" id="category-filter" class="restaurant-filter">\n          <option value="전체">전체</option>\n          <option value="한식">한식</option>\n          <option value="중식">중식</option>\n          <option value="일식">일식</option>\n          <option value="양식">양식</option>\n          <option value="아시안">아시안</option>\n          <option value="기타">기타</option>\n        </select>\n        <select name="sorting" id="sorting-filter" class="restaurant-filter">\n          <option value="name">이름순</option>\n          <option value="distance">거리순</option>\n        </select>\n      </section>\n    '};const j=Object.freeze({link:/^(https?:\/\/)?(www\.)?([a-zA-Z0-9-]+)\.([a-z]+).*$/}),W=Object.freeze({한식:"./category-korean.png",중식:"./category-chinese.png",양식:"./category-western.png",일식:"./category-japanese.png",아시안:"./category-asian.png",기타:"./category-etc.png"}),R=Object.freeze({starred:"./favorite-icon-filled.png",unstarred:"./favorite-icon-lined.png"}),S=["한식","중식","일식","아시안","양식","기타"],O="RESTAURANT_APP";var L,P,Y,F,D,z,$,H=function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,e):a?a.value=e:t.set(n,e),e},Z=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};P=new WeakMap,Y=new WeakMap,F=new WeakMap,L=new WeakSet,D=function(){const n=`\n      <li class="restaurant" ${"number"==typeof Z(this,Y,"f").itemId?`id="restaurant-${Z(this,Y,"f").itemId}"`:""}>\n        <div class="restaurant__category">\n          <img\n            src="${W[Z(this,Y,"f").category]||W["기타"]}"\n            alt="${Z(this,Y,"f").category}"\n            class="category-icon"\n          />\n        </div>\n        <button class="favorite-icon" ${"number"==typeof Z(this,Y,"f").itemId?`id="favorite-${Z(this,Y,"f").itemId}"`:""}>\n          <img src="${Z(this,Y,"f").isFavorite?R.starred:R.unstarred}" class="favorite-icon" />\n        </button>\n        <div class="restaurant__info">\n          <h3 class="restaurant__name text-subtitle">${Z(this,Y,"f").name}</h3>\n          <span class="restaurant__distance text-body"\n            >캠퍼스부터 ${Z(this,Y,"f").distanceInMinutes}분 내</span\n          >\n          <p class="restaurant__description text-body">\n            ${Z(this,Y,"f").description}\n          </p>\n          <a class="restaurant__link" href="${Z(this,Y,"f").link}" target="__blank">${Z(this,Y,"f").link}</a>\n        </div>\n      </li>\n    `;Z(this,P,"f")&&Z(this,P,"f").insertAdjacentHTML("beforeEnd",n)},z=function(){"number"==typeof Z(this,Y,"f").itemId&&(h(`#restaurant-${Z(this,Y,"f").itemId}`).addEventListener("click",(()=>{void 0!==Z(this,F,"f")&&void 0!==Z(this,F,"f").onItemClicked&&Z(this,F,"f").onItemClicked(Z(this,Y,"f").itemId)})),h(`#favorite-${Z(this,Y,"f").itemId}`).addEventListener("click",(n=>{n.stopPropagation(),void 0!==Z(this,F,"f")&&void 0!==Z(this,F,"f").onFavoriteButtonClicked&&Z(this,F,"f").onFavoriteButtonClicked(Z(this,Y,"f").itemId)})))},$=function(){h(`#restaurant-${Z(this,Y,"f").itemId}`).removeAttribute("id"),h(`#favorite-${Z(this,Y,"f").itemId}`).removeAttribute("id")};const N=class{constructor({parentElement:n,restaurant:t,parentEvent:e}){L.add(this),P.set(this,void 0),Y.set(this,void 0),F.set(this,void 0),H(this,P,n,"f"),H(this,Y,t,"f"),H(this,F,e,"f"),Z(this,L,"m",D).call(this),Z(this,L,"m",z).call(this),Z(this,L,"m",$).call(this)}};var q,X,U,J,Q,G,V=function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,e):a?a.value=e:t.set(n,e),e},K=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};X=new WeakMap,U=new WeakMap,J=new WeakMap,q=new WeakSet,Q=function(){K(this,X,"f").innerHTML='\n      <ul class="restaurants-list" id="restaurant-list"></ul>\n    '},G=function(){K(this,U,"f").forEach((n=>{console.log(n,n.itemId),new N({parentElement:h("#restaurant-list"),restaurant:n,parentEvent:{onItemClicked:n=>K(this,J,"f").onRestaurantItemClicked(n),onFavoriteButtonClicked:n=>K(this,J,"f").onFavoriteButtonClicked(n)}})}))};var nn,tn,en,rn,an,on=function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,e):a?a.value=e:t.set(n,e),e},sn=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};tn=new WeakMap,en=new WeakMap,nn=new WeakSet,rn=function(){const n=`\n      <dialog class="modal" id="${sn(this,en,"f").id}">\n        <div class="modal-backdrop"></div>\n          <div class="modal-container">\n            <div id="${sn(this,en,"f").innerId}"></div>\n          </div>\n        </div>\n      </dialog>`;sn(this,tn,"f").innerHTML=n},an=function(){h(`#${sn(this,en,"f").id} .modal-backdrop`).addEventListener("click",(()=>{this.closeOrOpenModal("close")})),document.addEventListener("keydown",(n=>{"Escape"===n.key&&this.closeOrOpenModal("close")}))};const ln=class{constructor({parentElement:n,info:t}){nn.add(this),tn.set(this,void 0),en.set(this,void 0),on(this,tn,n,"f"),on(this,en,t,"f"),sn(this,nn,"m",rn).call(this),sn(this,nn,"m",an).call(this)}closeOrOpenModal(n){const t=h(`#${sn(this,en,"f").id}`);t instanceof HTMLDialogElement&&("open"===n?t.classList.add("modal--open"):t.classList.remove("modal--open"))}fillContents(n){h(`#${sn(this,en,"f").innerId}`).innerHTML=n}};var cn,dn,An,fn,pn,un,hn=function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,e):a?a.value=e:t.set(n,e),e},mn=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};dn=new WeakMap,An=new WeakMap,fn=new WeakMap,cn=new WeakSet,pn=function(){const n=`\n      <div class="button-container">\n        <button type="button" class="button button--secondary text-caption" id="${mn(this,An,"f").leftButtonId}">${mn(this,An,"f").leftButtonName}</button>\n        <button class="button button--primary text-caption" id="${mn(this,An,"f").rightButtonId}">${mn(this,An,"f").rightButtonName}</button>\n      </div>\n    `;mn(this,dn,"f")&&mn(this,dn,"f").insertAdjacentHTML("beforeEnd",n)},un=function(){h(`#${mn(this,An,"f").leftButtonId}`).addEventListener("click",(()=>{void 0!==mn(this,fn,"f").onLeftButtonClicked&&mn(this,fn,"f").onLeftButtonClicked()})),h(`#${mn(this,An,"f").rightButtonId}`).addEventListener("click",(()=>{void 0!==mn(this,fn,"f").onRightButtonClicked&&mn(this,fn,"f").onRightButtonClicked()}))};const En=class{constructor({parentElement:n,info:t,parentEvent:e}){cn.add(this),dn.set(this,void 0),An.set(this,void 0),fn.set(this,void 0),hn(this,dn,n,"f"),hn(this,An,t,"f"),hn(this,fn,e,"f"),mn(this,cn,"m",pn).call(this),mn(this,cn,"m",un).call(this)}};var gn,vn,Bn,wn,Cn,bn,yn=function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,e):a?a.value=e:t.set(n,e),e},xn=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};vn=new WeakMap,Bn=new WeakMap,wn=new WeakMap,gn=new WeakSet,Cn=function(){h("#restaurant-add-modal-contents").innerHTML='\n      <h2 class="modal-title text-title">새로운 음식점</h2>\n      <form id="modal-add-form">\n        <div class="form-item form-item--required">\n          <label for="category text-caption">카테고리</label>\n          <select name="category" id="category" required>\n            <option value="">선택해 주세요</option>\n            <option value="한식">한식</option>\n            <option value="중식">중식</option>\n            <option value="일식">일식</option>\n            <option value="양식">양식</option>\n            <option value="아시안">아시안</option>\n            <option value="기타">기타</option>\n          </select>\n        </div>\n        <div class="form-item form-item--required">\n          <label for="name">이름</label>\n          <input type="text" name="name" id="name" required>\n        </div>\n        <div class="form-item form-item--required">\n          <label for="distance">거리(도보 이동 시간) </label>\n          <select name="distanceInMinutes" id="distance" required>\n            <option value="">선택해 주세요</option>\n            <option value="5">5분 내</option>\n            <option value="10">10분 내</option>\n            <option value="15">15분 내</option>\n            <option value="20">20분 내</option>\n            <option value="30">30분 내</option>\n          </select>\n        </div>\n        <div class="form-item">\n          <label for="description">설명</label>\n          <textarea name="description" id="description" cols="30" rows="5"></textarea>\n          <span class="help-text text-caption">메뉴 등 추가 정보를 입력해 주세요.</span>\n        </div>\n        <div class="form-item">\n          <label for="link">참고 링크</label>\n          <input type="text" name="link" id="link">\n          <span class="help-text text-caption">매장 정보를 확인할 수 있는 링크를 입력해 주세요.</span>\n        </div>\n        <div class="error-item" id="error-item">\n          <img class="error-image" src="./error-icon.png" />\n          <div class="error-text text-caption" id="error-text"></span>\n        </div>\n      </form>\n    ',new En({parentElement:h("#modal-add-form"),info:{leftButtonId:"add-modal-cancel",rightButtonId:"add-modal-submit",leftButtonName:"취소하기",rightButtonName:"추가하기"},parentEvent:{onLeftButtonClicked:()=>xn(this,Bn,"f").onModalCancelButtonClicked()}})},bn=function(){const n=h("#modal-add-form");n.addEventListener("submit",(t=>{if(t.preventDefault(),n instanceof HTMLFormElement){const t=(n=>{const t=new FormData(n);return Object.fromEntries(t.entries())})(n);xn(this,Bn,"f").onModalAddButtonClicked(t)}}))};var kn,Mn,Tn,_n=function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,e):a?a.value=e:t.set(n,e),e},In=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};kn=new WeakMap,Mn=new WeakMap,Tn=new WeakMap;var jn,Wn,Rn,Sn,On,Ln,Pn,Yn,Fn,Dn,zn,$n,Hn=function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,e):a?a.value=e:t.set(n,e),e},Zn=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};Wn=new WeakMap,Rn=new WeakMap,Sn=new WeakMap,On=new WeakMap,jn=new WeakSet,Ln=function(){Zn(this,Wn,"f").innerHTML='\n      <div id="header-root"></div>\n      <main id="app-main">\n        <div id="filter-root"></div>\n        <section\n          class="restaurant-list-container"\n          id="restaurant-list-root"\n        ></section>\n        <div id="restaurant-add-modal-root"></div>\n        <div id="restaurant-info-modal-root"></div>\n      </main>\n    '},Pn=function(n){Zn(this,jn,"m",Yn).call(this),Zn(this,jn,"m",Fn).call(this),Zn(this,jn,"m",Dn).call(this,n),Zn(this,jn,"m",zn).call(this),Zn(this,jn,"m",$n).call(this)},Yn=function(){new class{constructor({parentElement:n,parentEvent:t}){m.add(this),E.set(this,void 0),g.set(this,void 0),w(this,E,n,"f"),w(this,g,t,"f"),C(this,m,"m",v).call(this),C(this,m,"m",B).call(this)}}({parentElement:h("#header-root"),parentEvent:{onHeaderAddButtonClicked:()=>Zn(this,Rn,"f").onHeaderAddButtonClicked()}})},Fn=function(){new class{constructor({parentElement:n,parentEvent:t}){b.add(this),y.set(this,void 0),x.set(this,void 0),_(this,y,n,"f"),_(this,x,t,"f"),I(this,b,"m",T).call(this),I(this,b,"m",k).call(this)}}({parentElement:h("#filter-root"),parentEvent:{onFilterByChange:n=>Zn(this,Rn,"f").onFilterByChange(n),onSortByChange:n=>Zn(this,Rn,"f").onSortByChange(n),onFavoriteByChange:n=>{Zn(this,Rn,"f").onFavoriteByChange(n)}}})},Dn=function(n){new class{constructor({parentElement:n,restaurants:t,parentEvent:e}){q.add(this),X.set(this,void 0),U.set(this,void 0),J.set(this,void 0),V(this,X,n,"f"),V(this,U,t,"f"),V(this,J,e,"f"),console.log(t),K(this,q,"m",Q).call(this),K(this,q,"m",G).call(this)}}({parentElement:h("#restaurant-list-root"),restaurants:n,parentEvent:{onRestaurantItemClicked:n=>Zn(this,Rn,"f").onRestaurantItemClicked(n),onFavoriteButtonClicked:n=>Zn(this,Rn,"f").onFavoriteButtonClicked(n)}})},zn=function(){Hn(this,Sn,new class{constructor({parentElement:n,parentEvent:t}){gn.add(this),vn.set(this,void 0),Bn.set(this,void 0),wn.set(this,void 0),yn(this,vn,n,"f"),yn(this,Bn,t,"f"),yn(this,wn,new ln({parentElement:xn(this,vn,"f"),info:{id:"restaurant-add-modal",innerId:"restaurant-add-modal-contents"}}),"f"),xn(this,gn,"m",Cn).call(this),xn(this,gn,"m",bn).call(this)}closeOrOpenModal(n){xn(this,wn,"f").closeOrOpenModal(n)}showErrorMessage(n){h("#error-item").style.opacity="1",h("#error-text").innerText=n}hideErrorMessage(){h("#error-item").style.opacity="0"}clearAllInputs(){document.querySelectorAll("#modal-add-form input, #modal-add-form textarea, #modal-add-form select").forEach((n=>{(n instanceof HTMLInputElement||n instanceof HTMLTextAreaElement||n instanceof HTMLSelectElement)&&(n.value="")}))}}({parentElement:h("#restaurant-add-modal-root"),parentEvent:{onModalCancelButtonClicked:()=>Zn(this,Rn,"f").onModalCancelButtonClicked(),onModalAddButtonClicked:n=>Zn(this,Rn,"f").onModalAddButtonClicked(n)}}),"f")},$n=function(){Hn(this,On,new class{constructor({parentElement:n,parentEvent:t}){kn.set(this,void 0),Mn.set(this,void 0),Tn.set(this,void 0),_n(this,kn,n,"f"),_n(this,Mn,t,"f"),_n(this,Tn,new ln({parentElement:In(this,kn,"f"),info:{id:"restaurant-info-modal",innerId:"restaurant-info-modal-contents"}}),"f")}closeOrOpenModal(n){In(this,Tn,"f").closeOrOpenModal(n)}updateRestaurantInfo(n){h("#restaurant-info-modal-contents").innerHTML="",new N({parentElement:h("#restaurant-info-modal-contents"),restaurant:n,parentEvent:{onFavoriteButtonClicked:n=>In(this,Mn,"f").onFavoriteButtonClicked(n)}}),new En({parentElement:h("#restaurant-info-modal-contents"),info:{leftButtonId:"info-modal-delete",rightButtonId:"info-modal-close",leftButtonName:"삭제하기",rightButtonName:"닫기"},parentEvent:{onLeftButtonClicked:()=>In(this,Mn,"f").onDeleteButtonClicked(n.itemId),onRightButtonClicked:()=>this.closeOrOpenModal("close")}})}openInfoModal(n){this.updateRestaurantInfo(n),this.closeOrOpenModal("open")}}({parentElement:h("#restaurant-info-modal-root"),parentEvent:{onFavoriteButtonClicked:n=>Zn(this,Rn,"f").onFavoriteButtonClicked(n),onDeleteButtonClicked:n=>Zn(this,Rn,"f").onDeleteButtonClicked(n)}}),"f")};var Nn,qn,Xn,Un,Jn=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};Nn=new WeakSet,qn=function(n){return[...n].filter((n=>!0===n.isFavorite))},Xn=function(n,t){return"전체"===t?n:[...n].filter((n=>n.category===t))},Un=function(n,t){return"name"===t?[...n].sort(((n,t)=>n.name.localeCompare(t.name))):[...n].sort(((n,t)=>Number(n.distanceInMinutes)-Number(t.distanceInMinutes)))};const Qn={getData(n){const t=localStorage.getItem(n);return null===t?null:JSON.parse(t)},setData(n,t){localStorage.setItem(n,JSON.stringify(t))}};var Gn,Vn,Kn,nt,tt,et,rt,at=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};Vn=new WeakMap,Kn=new WeakMap,nt=new WeakMap,tt=new WeakMap,Gn=new WeakSet,et=function(n){return`${n.startsWith("https://")||n.startsWith("http://")?"":"https://"}${n}`},rt=function(n){let t=-1;return at(this,Vn,"f").forEach(((e,r)=>{e.itemId===n&&(t=r)})),t};var ot,it,st,lt,ct,dt=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};ot=new WeakSet,it=function(n){if(!S.includes(n))throw new Error("카테고리를 선택해 주세요!")},st=function(n){if(0===n.trim().length)throw new Error("음식점 이름을 입력해 주세요!")},lt=function(n){if(0===n.trim().length)throw new Error("거리를 선택해 주세요!")},ct=function(n){if(!j.link.test(n))throw new Error("올바른 주소를 입력해 주세요!")};var At,ft,pt,ut,ht,mt,Et,gt,vt,Bt,wt,Ct,bt,yt=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};ft=new WeakMap,pt=new WeakMap,ut=new WeakMap,At=new WeakSet,ht=function(){yt(this,ut,"f").closeOrOpenRestaurantAddModal("close"),yt(this,ut,"f").clearAllModalInputs()},mt=function(n){try{yt(this,pt,"f").errorIfInvalidRestaurant(n),yt(this,ft,"f").addRestaurant(n),yt(this,ft,"f").saveRestaurantsToLocalStorage(),yt(this,ut,"f").updateRestaurants(yt(this,ft,"f").getRestaurants()),yt(this,ut,"f").clearAllModalInputs(),yt(this,ut,"f").closeOrOpenRestaurantAddModal("close"),yt(this,ut,"f").hideRestaurantAddModalErrorMessage()}catch({message:n}){"string"==typeof n&&yt(this,ut,"f").showRestaurantAddModalErrorMessage(n)}},Et=function(){yt(this,ut,"f").closeOrOpenRestaurantAddModal("open")},gt=function(n){yt(this,ft,"f").setFilterBy(n),yt(this,ut,"f").updateRestaurants(yt(this,ft,"f").getRestaurants())},vt=function(n){yt(this,ft,"f").setSortBy(n),yt(this,ut,"f").updateRestaurants(yt(this,ft,"f").getRestaurants())},Bt=function(n){yt(this,ft,"f").setFavoriteBy(n),yt(this,ut,"f").updateRestaurants(yt(this,ft,"f").getRestaurants())},wt=function(n){const t=yt(this,ft,"f").getRestaurantById(n);yt(this,ut,"f").updateRestaurantInfo(t),yt(this,ut,"f").closeOrOpenRestaurantInfoModal("open")},Ct=function(n){yt(this,ft,"f").toggleFavorite(n),yt(this,ut,"f").updateRestaurants(yt(this,ft,"f").getRestaurants()),yt(this,ut,"f").updateRestaurantInfo(yt(this,ft,"f").getRestaurantById(n)),yt(this,ft,"f").saveRestaurantsToLocalStorage()},bt=function(n){yt(this,ut,"f").closeOrOpenRestaurantInfoModal("close"),yt(this,ft,"f").deleteRestaurantById(n),yt(this,ut,"f").updateRestaurants(yt(this,ft,"f").getRestaurants()),yt(this,ft,"f").saveRestaurantsToLocalStorage()},new class{constructor(){At.add(this),ft.set(this,new class{constructor(){Gn.add(this),Vn.set(this,(Qn.getData(O)||[]).restaurants||[]),Kn.set(this,(Qn.getData(O)||[]).id||0),nt.set(this,new class{constructor(){Nn.add(this)}search(n,t){if("favorite"===t.favoriteBy)return Jn(this,Nn,"m",qn).call(this,n);const e=Jn(this,Nn,"m",Xn).call(this,n,t.filterBy);return Jn(this,Nn,"m",Un).call(this,e,t.sortBy)}}),tt.set(this,{filterBy:"전체",sortBy:"name",favoriteBy:"all"})}addRestaurant(n){at(this,Vn,"f").push({...n,isFavorite:!1,itemId:at(this,Kn,"f"),link:at(this,Gn,"m",et).call(this,n.link)}),function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?a.call(n,e):a?a.value=e:t.set(n,e)}(this,Kn,at(this,Kn,"f")+1,"f")}getRestaurants(){return at(this,nt,"f").search(at(this,Vn,"f"),at(this,tt,"f"))}saveRestaurantsToLocalStorage(){Qn.setData(O,{restaurants:at(this,Vn,"f"),id:at(this,Kn,"f")})}setFilterBy(n){at(this,tt,"f").filterBy=n}setSortBy(n){at(this,tt,"f").sortBy=n}setFavoriteBy(n){at(this,tt,"f").favoriteBy=n}toggleFavorite(n){const t=at(this,Gn,"m",rt).call(this,n);-1!==n&&(at(this,Vn,"f")[t].isFavorite?at(this,Vn,"f")[t].isFavorite=!1:at(this,Vn,"f")[t].isFavorite=!0)}getRestaurantById(n){const t=at(this,Gn,"m",rt).call(this,n);if(-1===t)throw Error("데이터를 불러오는 중 오류가 발생했습니다. 페이지를 새로고침 해 주세요.");return at(this,Vn,"f")[t]}deleteRestaurantById(n){const t=at(this,Gn,"m",rt).call(this,n);-1!==t&&at(this,Vn,"f").splice(t,1)}}),pt.set(this,new class{constructor(){ot.add(this)}errorIfInvalidRestaurant(n){dt(this,ot,"m",it).call(this,n.category),dt(this,ot,"m",st).call(this,n.name),dt(this,ot,"m",lt).call(this,n.distanceInMinutes),dt(this,ot,"m",ct).call(this,n.link)}}),ut.set(this,new class{constructor({parentElement:n,restaurants:t,parentEvent:e}){jn.add(this),Wn.set(this,void 0),Rn.set(this,void 0),Sn.set(this,void 0),On.set(this,void 0),Hn(this,Wn,n,"f"),Hn(this,Rn,e,"f"),Zn(this,jn,"m",Ln).call(this),Zn(this,jn,"m",Pn).call(this,t)}updateRestaurants(n){Zn(this,jn,"m",Dn).call(this,n)}closeOrOpenRestaurantAddModal(n){Zn(this,Sn,"f").closeOrOpenModal(n)}closeOrOpenRestaurantInfoModal(n){Zn(this,On,"f").closeOrOpenModal(n)}clearAllModalInputs(){Zn(this,Sn,"f").clearAllInputs()}updateRestaurantInfo(n){Zn(this,On,"f").updateRestaurantInfo(n)}showRestaurantAddModalErrorMessage(n){Zn(this,Sn,"f").showErrorMessage(n)}hideRestaurantAddModalErrorMessage(){Zn(this,Sn,"f").hideErrorMessage()}}({parentElement:h("#root"),restaurants:yt(this,ft,"f").getRestaurants(),parentEvent:{onModalCancelButtonClicked:()=>yt(this,At,"m",ht).call(this),onModalAddButtonClicked:n=>yt(this,At,"m",mt).call(this,n),onHeaderAddButtonClicked:()=>yt(this,At,"m",Et).call(this),onFilterByChange:n=>yt(this,At,"m",gt).call(this,n),onSortByChange:n=>yt(this,At,"m",vt).call(this,n),onRestaurantItemClicked:n=>yt(this,At,"m",wt).call(this,n),onFavoriteButtonClicked:n=>yt(this,At,"m",Ct).call(this,n),onDeleteButtonClicked:n=>yt(this,At,"m",bt).call(this,n),onFavoriteByChange:n=>yt(this,At,"m",Bt).call(this,n)}}))}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QzFJZ0csc0JBQXdCaEcsR0FBVyxHQUF1Qm5MLEtBQU11VCxHQUFxQixJQUFLWSxJQUFpQ25OLEtBQUtoSCxLQUFNbUwsR0FDdElwQixtQkFBcUJ5RyxHQUFpQixHQUF1QnhRLEtBQU11VCxHQUFxQixJQUFLUyxJQUE4QmhOLEtBQUtoSCxLQUFNd1EsTUFHbEosRSIsInNvdXJjZXMiOlsid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vdGVtcGxhdGVzL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vdGVtcGxhdGVzL3N0eWxlLmNzcz8yYWZmIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vdGVtcGxhdGVzL2FkZC1idXR0b24ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vdGVtcGxhdGVzL2NhdGVnb3J5LWFzaWFuLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3RlbXBsYXRlcy9jYXRlZ29yeS1jaGluZXNlLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3RlbXBsYXRlcy9jYXRlZ29yeS1ldGMucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vdGVtcGxhdGVzL2NhdGVnb3J5LWphcGFuZXNlLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3RlbXBsYXRlcy9jYXRlZ29yeS1rb3JlYW4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vdGVtcGxhdGVzL2NhdGVnb3J5LXdlc3Rlcm4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vdGVtcGxhdGVzL2Zhdm9yaXRlLWljb24tZmlsbGVkLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3RlbXBsYXRlcy9mYXZvcml0ZS1pY29uLWxpbmVkLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3RlbXBsYXRlcy9lcnJvci1pY29uLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy91dGlsL3F1ZXJ5U2VsZWN0b3IudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvdmlldy9IZWFkZXIudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvdmlldy9SZXN0YXVyYW50RmlsdGVyLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbnN0YW50L2luZGV4LnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3ZpZXcvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy92aWV3L1Jlc3RhdXJhbnRMaXN0LnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3ZpZXcvY29tcG9uZW50cy9Nb2RhbC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy92aWV3L2NvbXBvbmVudHMvVHdpbkJ1dHRvbnMudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvdmlldy9SZXN0YXVyYW50QWRkTW9kYWwudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvdXRpbC9nZXRGb3JtRGF0YS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy92aWV3L1Jlc3RhdXJhbnRJbmZvTW9kYWwudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvdmlldy9MdW5jaEFwcFZpZXcudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvZG9tYWluL1Jlc3RhdXJhbnRTZWFyY2hlci50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy91dGlsL3N0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvZG9tYWluL1Jlc3RhdXJhbnRzLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2RvbWFpbi9WYWxpZGF0b3IudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29udHJvbGxlci9MdW5jaEFwcC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvb3Jpb25jYWN0dXMvcHJldGVuZGFyZC9kaXN0L3dlYi9zdGF0aWMvcHJldGVuZGFyZC5jc3MpO1wiXSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZm9udC1mYW1pbHk6ICdQcmV0ZW5kYXJkJztcXG59XFxuXFxudWwsXFxubGkge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuaHRtbCxcXG5ib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4vKiBDb2xvcnMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuOnJvb3Qge1xcbiAgLS1wcmltYXJ5LWNvbG9yOiAjZWM0YTBhO1xcbiAgLS1saWdodGVuLWNvbG9yOiAjZjZhODhhO1xcbiAgLS1yZXN0YXVyYW50LWl0ZW0taG92ZXItY29sb3I6ICNlYzRhMGEyMDtcXG4gIC0tZ3JleS0xMDA6ICNmZmZmZmY7XFxuICAtLWdyZXktMjAwOiAjZDBkNWRkO1xcbiAgLS1ncmV5LTMwMDogIzY2NzA4NTtcXG4gIC0tZ3JleS00MDA6ICMzNDQwNTQ7XFxuICAtLWdyZXktNTAwOiAjMDAwMDAwO1xcbn1cXG5cXG4vKiBUeXBvZ3JhcGh5ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLnRleHQtdGl0bGUge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGV4dC1zdWJ0aXRsZSB7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBsaW5lLWhlaWdodDogMjhweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi50ZXh0LWJvZHkge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4udGV4dC1jYXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLyogR05CICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi5nbmIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBoZWlnaHQ6IDY0cHg7XFxuXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLmduYl9fdGl0bGUge1xcbiAgY29sb3I6ICNmY2ZjZmQ7XFxufVxcblxcbi5nbmJfX2J1dHRvbiB7XFxuICBoZWlnaHQ6IDQwcHg7XFxuXFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGZvbnQtc2l6ZTogMjRweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmduYl9fYnV0dG9uIGltZyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcXG59XFxuXFxuLyog7J2M7Iud7KCQIOuqqeuhnSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG5cXG4vKiDsubTthYzqs6Drpqwv7KCV66CsIO2VhO2EsCAqL1xcbi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbi10b3A6IDI0cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIgc2VsZWN0IHtcXG4gIGhlaWdodDogNDRweDtcXG4gIG1pbi13aWR0aDogMTI1cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCAjZDBkNWRkO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWZpbHRlciB7XFxuICBwYWRkaW5nOiA4cHg7XFxufVxcblxcbi8qIOydjOyLneygkCDrqqnroZ0gKi9cXG4ucmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbjogMTZweCAwO1xcbn1cXG5cXG4ucmVzdGF1cmFudCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICBwYWRkaW5nOiAxNnB4IDhweDtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllYWVkO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fY2F0ZWdvcnkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiA2NHB4O1xcbiAgaGVpZ2h0OiA2NHB4O1xcbiAgbWluLXdpZHRoOiA2NHB4O1xcbiAgbWluLWhlaWdodDogNjRweDtcXG5cXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxpZ2h0ZW4tY29sb3IpO1xcbn1cXG5cXG4uY2F0ZWdvcnktaWNvbiB7XFxuICB3aWR0aDogMzZweDtcXG4gIGhlaWdodDogMzZweDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2luZm8ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcblxcbi5yZXN0YXVyYW50X19uYW1lIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rpc3RhbmNlIHtcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcblxcbiAgcGFkZGluZy10b3A6IDhweDtcXG5cXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIC13ZWJraXQtbGluZS1jbGFtcDogMjtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxufVxcblxcbi5yZXN0YXVyYW50X19saW5rIHtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiBibGFjaztcXG4gIGNvbG9yOiBibGFjaztcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi8qIOydjOyLneygkCDstpTqsIAg66qo64usICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi5tb2RhbCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xcbiAgdHJhbnNpdGlvbjogMC4ycztcXG5cXG4gIGJvdHRvbTogLTEwMDBweDtcXG59XFxuXFxuLm1vZGFsLWJhY2tkcm9wIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuXFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMzUpO1xcbiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDhweCk7XFxufVxcblxcbi5tb2RhbC5tb2RhbC0tb3BlbiB7XFxuICBib3R0b206IDA7XFxufVxcblxcbi5tb2RhbC0tb3BlbiAubW9kYWwtYmFja2Ryb3Age1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5tb2RhbC1jb250YWluZXIge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgd2lkdGg6IDEwMCU7XFxuXFxuICBwYWRkaW5nOiAzMnB4IDE2cHg7XFxuXFxuICBib3JkZXItcmFkaXVzOiA4cHggOHB4IDBweCAwcHg7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1ncmV5LTEwMCk7XFxufVxcblxcbi5tb2RhbC10aXRsZSB7XFxuICBtYXJnaW4tYm90dG9tOiAzNnB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgbWFyZ2luLWJvdHRvbTogMzZweDtcXG59XFxuXFxuLmZvcm0taXRlbSBsYWJlbCB7XFxuICBjb2xvcjogdmFyKC0tZ3JleS00MDApO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtLS1yZXF1aXJlZCBsYWJlbDo6YWZ0ZXIge1xcbiAgcGFkZGluZy1sZWZ0OiA0cHg7XFxuXFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuICBjb250ZW50OiAnKic7XFxufVxcblxcbi5mb3JtLWl0ZW0gLmhlbHAtdGV4dCB7XFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG4uZm9ybS1pdGVtIGlucHV0LFxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEsXFxuLmZvcm0taXRlbSBzZWxlY3Qge1xcbiAgcGFkZGluZzogOHB4O1xcbiAgbWFyZ2luOiA2cHggMDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLmZvcm0taXRlbSB0ZXh0YXJlYSB7XFxuICByZXNpemU6IG5vbmU7XFxufVxcblxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXG4gIGhlaWdodDogNDRweDtcXG5cXG4gIHBhZGRpbmc6IDhweDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbmlucHV0W25hbWU9J25hbWUnXSxcXG5pbnB1dFtuYW1lPSdsaW5rJ10ge1xcbiAgaGVpZ2h0OiA0NHB4O1xcbn1cXG5cXG4uYnV0dG9uLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uYnV0dG9uIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA0NHB4O1xcblxcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcblxcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmJ1dHRvbjpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG59XFxuXFxuLmJ1dHRvbi0tc2Vjb25kYXJ5IHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMzAwKTtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuLmJ1dHRvbi0tcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTEwMCk7XFxufVxcblxcbi8qIDLri6jqs4Qg7J207ZuEIOyLoOq3nCDsho3shLEg7KCV7J2YICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi5yZXN0YXVyYW50IHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHRyYW5zaXRpb246IDAuMnM7XFxufVxcblxcbi5yZXN0YXVyYW50OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXJlc3RhdXJhbnQtaXRlbS1ob3Zlci1jb2xvcik7XFxufVxcblxcbiNyZXN0YXVyYW50LWluZm8tbW9kYWwtY29udGVudHMgLnJlc3RhdXJhbnQge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGJvcmRlci1ib3R0b206IG5vbmU7XFxufVxcblxcbiNyZXN0YXVyYW50LWluZm8tbW9kYWwtY29udGVudHMgLnJlc3RhdXJhbnQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblxcbiNyZXN0YXVyYW50LWluZm8tbW9kYWwtY29udGVudHMgLnJlc3RhdXJhbnRfX2NhdGVnb3J5IHtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbiNyZXN0YXVyYW50LWluZm8tbW9kYWwtY29udGVudHMgLnJlc3RhdXJhbnRfX2Rpc3RhbmNlLnRleHQtYm9keSB7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG5cXG4jcmVzdGF1cmFudC1pbmZvLW1vZGFsLWNvbnRlbnRzIC5yZXN0YXVyYW50X19uYW1lLnRleHQtc3VidGl0bGUge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDgwMDtcXG59XFxuXFxuI3Jlc3RhdXJhbnQtaW5mby1tb2RhbC1jb250ZW50cyAucmVzdGF1cmFudCAucmVzdGF1cmFudF9fZGVzY3JpcHRpb24ge1xcbiAgLXdlYmtpdC1saW5lLWNsYW1wOiAxNTtcXG59XFxuXFxuI3Jlc3RhdXJhbnQtaW5mby1tb2RhbC1jb250ZW50cyAucmVzdGF1cmFudCAucmVzdGF1cmFudF9fbGluayB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLmZhdm9yaXRlLWljb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICB0b3A6IDIwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5mYXZvcml0ZS1tZW51IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nOiAwIDE2cHggMCAxNnB4O1xcbn1cXG5cXG4uZmF2b3JpdGUtcmFkaW8ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBoZWlnaHQ6IDcwcHg7XFxuICBwYWRkaW5nOiAzMnB4IDAgMTZweCAwO1xcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTQwMCk7XFxuICB0cmFuc2l0aW9uOiAwLjJzO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5pbnB1dFt0eXBlPSdyYWRpbyddOmNoZWNrZWQgKyAuZmF2b3JpdGUtcmFkaW8sXFxuLmZhdm9yaXRlLXJhZGlvOmhvdmVyIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbn1cXG5cXG4uZXJyb3ItaXRlbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZ2FwOiA1cHg7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4uZXJyb3ItaW1hZ2Uge1xcbiAgd2lkdGg6IDIwcHg7XFxuICBoZWlnaHQ6IDE3cHg7XFxuICBtYXJnaW4tdG9wOiAxLjVweDtcXG59XFxuXFxuLmVycm9yLXRleHQge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3RlbXBsYXRlcy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSxVQUFVO0VBQ1YsU0FBUztFQUNULHNCQUFzQjtFQUN0Qix5QkFBeUI7QUFDM0I7O0FBRUE7O0VBRUUsZ0JBQWdCO0FBQ2xCOztBQUVBOztFQUVFLHVCQUF1QjtFQUN2QixlQUFlO0VBQ2YsWUFBWTtBQUNkOztBQUVBLG1EQUFtRDtBQUNuRDtFQUNFLHdCQUF3QjtFQUN4Qix3QkFBd0I7RUFDeEIsd0NBQXdDO0VBQ3hDLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckI7O0FBRUEsbURBQW1EO0FBQ25EO0VBQ0Us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RUFDckIsMkJBQTJCO0VBQzNCLGdCQUFnQjtFQUNoQixtQkFBbUI7QUFDckJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9vcmlvbmNhY3R1cy9wcmV0ZW5kYXJkL2Rpc3Qvd2ViL3N0YXRpYy9wcmV0ZW5kYXJkLmNzcycpO1xcblxcbioge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBmb250LWZhbWlseTogJ1ByZXRlbmRhcmQnO1xcbn1cXG5cXG51bCxcXG5saSB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG5odG1sLFxcbmJvZHkge1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbi8qIENvbG9ycyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG46cm9vdCB7XFxuICAtLXByaW1hcnktY29sb3I6ICNlYzRhMGE7XFxuICAtLWxpZ2h0ZW4tY29sb3I6ICNmNmE4OGE7XFxuICAtLXJlc3RhdXJhbnQtaXRlbS1ob3Zlci1jb2xvcjogI2VjNGEwYTIwO1xcbiAgLS1ncmV5LTEwMDogI2ZmZmZmZjtcXG4gIC0tZ3JleS0yMDA6ICNkMGQ1ZGQ7XFxuICAtLWdyZXktMzAwOiAjNjY3MDg1O1xcbiAgLS1ncmV5LTQwMDogIzM0NDA1NDtcXG4gIC0tZ3JleS01MDA6ICMwMDAwMDA7XFxufVxcblxcbi8qIFR5cG9ncmFwaHkgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG4udGV4dC10aXRsZSB7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi50ZXh0LXN1YnRpdGxlIHtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIGxpbmUtaGVpZ2h0OiAyOHB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuLnRleHQtYm9keSB7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi50ZXh0LWNhcHRpb24ge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4vKiBHTkIgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLmduYiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGhlaWdodDogNjRweDtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbn1cXG5cXG4uZ25iX190aXRsZSB7XFxuICBjb2xvcjogI2ZjZmNmZDtcXG59XFxuXFxuLmduYl9fYnV0dG9uIHtcXG4gIGhlaWdodDogNDBweDtcXG5cXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uZ25iX19idXR0b24gaW1nIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBvYmplY3QtZml0OiBjb250YWluO1xcbn1cXG5cXG4vKiDsnYzsi53soJAg66qp66GdICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcblxcbi8qIOy5tO2FjOqzoOumrC/soJXroKwg7ZWE7YSwICovXFxuLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcbiAgbWFyZ2luLXRvcDogMjRweDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lciBzZWxlY3Qge1xcbiAgaGVpZ2h0OiA0NHB4O1xcbiAgbWluLXdpZHRoOiAxMjVweDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkMGQ1ZGQ7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZmlsdGVyIHtcXG4gIHBhZGRpbmc6IDhweDtcXG59XFxuXFxuLyog7J2M7Iud7KCQIOuqqeuhnSAqL1xcbi5yZXN0YXVyYW50LWxpc3QtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcbiAgbWFyZ2luOiAxNnB4IDA7XFxufVxcblxcbi5yZXN0YXVyYW50IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIHBhZGRpbmc6IDE2cHggOHB4O1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOWVhZWQ7XFxufVxcblxcbi5yZXN0YXVyYW50X19jYXRlZ29yeSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDY0cHg7XFxuICBoZWlnaHQ6IDY0cHg7XFxuICBtaW4td2lkdGg6IDY0cHg7XFxuICBtaW4taGVpZ2h0OiA2NHB4O1xcblxcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcblxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYmFja2dyb3VuZDogdmFyKC0tbGlnaHRlbi1jb2xvcik7XFxufVxcblxcbi5jYXRlZ29yeS1pY29uIHtcXG4gIHdpZHRoOiAzNnB4O1xcbiAgaGVpZ2h0OiAzNnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudF9faW5mbyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX25hbWUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fZGlzdGFuY2Uge1xcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fZGVzY3JpcHRpb24ge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuXFxuICBwYWRkaW5nLXRvcDogOHB4O1xcblxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbiAgLXdlYmtpdC1saW5lLWNsYW1wOiAyO1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2xpbmsge1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICB0ZXh0LWRlY29yYXRpb24tY29sb3I6IGJsYWNrO1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuLyog7J2M7Iud7KCQIOy2lOqwgCDrqqjri6wgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLm1vZGFsIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XFxuICB0cmFuc2l0aW9uOiAwLjJzO1xcblxcbiAgYm90dG9tOiAtMTAwMHB4O1xcbn1cXG5cXG4ubW9kYWwtYmFja2Ryb3Age1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG5cXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4zNSk7XFxuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoOHB4KTtcXG59XFxuXFxuLm1vZGFsLm1vZGFsLS1vcGVuIHtcXG4gIGJvdHRvbTogMDtcXG59XFxuXFxuLm1vZGFsLS1vcGVuIC5tb2RhbC1iYWNrZHJvcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLm1vZGFsLWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB3aWR0aDogMTAwJTtcXG5cXG4gIHBhZGRpbmc6IDMycHggMTZweDtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDhweCA4cHggMHB4IDBweDtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWdyZXktMTAwKTtcXG59XFxuXFxuLm1vZGFsLXRpdGxlIHtcXG4gIG1hcmdpbi1ib3R0b206IDM2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFxuICBtYXJnaW4tYm90dG9tOiAzNnB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtIGxhYmVsIHtcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTQwMCk7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0tLXJlcXVpcmVkIGxhYmVsOjphZnRlciB7XFxuICBwYWRkaW5nLWxlZnQ6IDRweDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG4gIGNvbnRlbnQ6ICcqJztcXG59XFxuXFxuLmZvcm0taXRlbSAuaGVscC10ZXh0IHtcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbi5mb3JtLWl0ZW0gaW5wdXQsXFxuLmZvcm0taXRlbSB0ZXh0YXJlYSxcXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBtYXJnaW46IDZweCAwO1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtIHRleHRhcmVhIHtcXG4gIHJlc2l6ZTogbm9uZTtcXG59XFxuXFxuLmZvcm0taXRlbSBzZWxlY3Qge1xcbiAgaGVpZ2h0OiA0NHB4O1xcblxcbiAgcGFkZGluZzogOHB4O1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuaW5wdXRbbmFtZT0nbmFtZSddLFxcbmlucHV0W25hbWU9J2xpbmsnXSB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxufVxcblxcbi5idXR0b24tY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5idXR0b24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuXFxuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XFxuXFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uYnV0dG9uOmxhc3QtY2hpbGQge1xcbiAgbWFyZ2luLXJpZ2h0OiAwO1xcbn1cXG5cXG4uYnV0dG9uLS1zZWNvbmRhcnkge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0zMDApO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG4uYnV0dG9uLS1wcmltYXJ5IHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktY29sb3IpO1xcblxcbiAgY29sb3I6IHZhcigtLWdyZXktMTAwKTtcXG59XFxuXFxuLyogMuuLqOqzhCDsnbTtm4Qg7Iug6recIOyGjeyEsSDsoJXsnZggKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLnJlc3RhdXJhbnQge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgdHJhbnNpdGlvbjogMC4ycztcXG59XFxuXFxuLnJlc3RhdXJhbnQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcmVzdGF1cmFudC1pdGVtLWhvdmVyLWNvbG9yKTtcXG59XFxuXFxuI3Jlc3RhdXJhbnQtaW5mby1tb2RhbC1jb250ZW50cyAucmVzdGF1cmFudCB7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcXG59XFxuXFxuI3Jlc3RhdXJhbnQtaW5mby1tb2RhbC1jb250ZW50cyAucmVzdGF1cmFudDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuXFxuI3Jlc3RhdXJhbnQtaW5mby1tb2RhbC1jb250ZW50cyAucmVzdGF1cmFudF9fY2F0ZWdvcnkge1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuI3Jlc3RhdXJhbnQtaW5mby1tb2RhbC1jb250ZW50cyAucmVzdGF1cmFudF9fZGlzdGFuY2UudGV4dC1ib2R5IHtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbiNyZXN0YXVyYW50LWluZm8tbW9kYWwtY29udGVudHMgLnJlc3RhdXJhbnRfX25hbWUudGV4dC1zdWJ0aXRsZSB7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBmb250LXdlaWdodDogODAwO1xcbn1cXG5cXG4jcmVzdGF1cmFudC1pbmZvLW1vZGFsLWNvbnRlbnRzIC5yZXN0YXVyYW50IC5yZXN0YXVyYW50X19kZXNjcmlwdGlvbiB7XFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IDE1O1xcbn1cXG5cXG4jcmVzdGF1cmFudC1pbmZvLW1vZGFsLWNvbnRlbnRzIC5yZXN0YXVyYW50IC5yZXN0YXVyYW50X19saW5rIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uZmF2b3JpdGUtaWNvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTBweDtcXG4gIHRvcDogMjBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmZhdm9yaXRlLW1lbnUge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBhZGRpbmc6IDAgMTZweCAwIDE2cHg7XFxufVxcblxcbi5mYXZvcml0ZS1yYWRpbyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGhlaWdodDogNzBweDtcXG4gIHBhZGRpbmc6IDMycHggMCAxNnB4IDA7XFxuICBib3JkZXItYm90dG9tOiAzcHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcbiAgY29sb3I6IHZhcigtLWdyZXktNDAwKTtcXG4gIHRyYW5zaXRpb246IDAuMnM7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbmlucHV0W3R5cGU9J3JhZGlvJ106Y2hlY2tlZCArIC5mYXZvcml0ZS1yYWRpbyxcXG4uZmF2b3JpdGUtcmFkaW86aG92ZXIge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi5lcnJvci1pdGVtIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IDVweDtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi5lcnJvci1pbWFnZSB7XFxuICB3aWR0aDogMjBweDtcXG4gIGhlaWdodDogMTdweDtcXG4gIG1hcmdpbi10b3A6IDEuNXB4O1xcbn1cXG5cXG4uZXJyb3ItdGV4dCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhZGQtYnV0dG9uLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1hc2lhbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktY2hpbmVzZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktZXRjLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1qYXBhbmVzZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnkta29yZWFuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS13ZXN0ZXJuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZvcml0ZS1pY29uLWZpbGxlZC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2b3JpdGUtaWNvbi1saW5lZC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZXJyb3ItaWNvbi5wbmdcIjsiLCJjb25zdCAkID0gKHNlbGVjdG9yKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0ZWRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgaWYgKCEoc2VsZWN0ZWRFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICAgIHRocm93IEVycm9yKCfsmpTshozrpbwg67aI65+s7Jik64qUIOuNsCDsi6TtjKjtlojsirXri4jri6QuIO2OmOydtOyngOulvCDsg4jroZzqs6Dsuagg7ZW0IOyjvOyEuOyalC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkRWxlbWVudDtcbn07XG5jb25zdCAkJCA9IChzZWxlY3RvcikgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5leHBvcnQgeyAkLCAkJCB9O1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9IZWFkZXJfaW5zdGFuY2VzLCBfSGVhZGVyX3BhcmVudEVsZW1lbnQsIF9IZWFkZXJfcGFyZW50RXZlbnQsIF9IZWFkZXJfcmVuZGVyLCBfSGVhZGVyX2FkZExpc3RlbmVycztcbmltcG9ydCB7ICQgfSBmcm9tICcuLi91dGlsL3F1ZXJ5U2VsZWN0b3InO1xuY2xhc3MgSGVhZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHBhcmVudEVsZW1lbnQsIHBhcmVudEV2ZW50IH0pIHtcbiAgICAgICAgX0hlYWRlcl9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfSGVhZGVyX3BhcmVudEVsZW1lbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9IZWFkZXJfcGFyZW50RXZlbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0hlYWRlcl9wYXJlbnRFbGVtZW50LCBwYXJlbnRFbGVtZW50LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0hlYWRlcl9wYXJlbnRFdmVudCwgcGFyZW50RXZlbnQsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfSGVhZGVyX2luc3RhbmNlcywgXCJtXCIsIF9IZWFkZXJfcmVuZGVyKS5jYWxsKHRoaXMpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9IZWFkZXJfaW5zdGFuY2VzLCBcIm1cIiwgX0hlYWRlcl9hZGRMaXN0ZW5lcnMpLmNhbGwodGhpcyk7XG4gICAgfVxufVxuX0hlYWRlcl9wYXJlbnRFbGVtZW50ID0gbmV3IFdlYWtNYXAoKSwgX0hlYWRlcl9wYXJlbnRFdmVudCA9IG5ldyBXZWFrTWFwKCksIF9IZWFkZXJfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX0hlYWRlcl9yZW5kZXIgPSBmdW5jdGlvbiBfSGVhZGVyX3JlbmRlcigpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGBcclxuICAgICAgPGhlYWRlciBjbGFzcz1cImduYlwiPlxyXG4gICAgICAgIDxoMSBjbGFzcz1cImduYl9fdGl0bGUgdGV4dC10aXRsZVwiPuygkOyLrCDrrZAg66i57KeAPC9oMT5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImduYl9fYnV0dG9uXCIgaWQ9XCJoZWFkZXItYWRkLWJ1dHRvblwiIGFyaWEtbGFiZWw9XCLsnYzsi53soJAg7LaU6rCAXCI+XHJcbiAgICAgICAgICA8aW1nIHNyYz1cIi4vYWRkLWJ1dHRvbi5wbmdcIiBhbHQ9XCLsnYzsi53soJAg7LaU6rCAXCIgLz5cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgPC9oZWFkZXI+YDtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9IZWFkZXJfcGFyZW50RWxlbWVudCwgXCJmXCIpLmlubmVySFRNTCA9IHRlbXBsYXRlO1xufSwgX0hlYWRlcl9hZGRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfSGVhZGVyX2FkZExpc3RlbmVycygpIHtcbiAgICAkKCcjaGVhZGVyLWFkZC1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfSGVhZGVyX3BhcmVudEV2ZW50LCBcImZcIikub25IZWFkZXJBZGRCdXR0b25DbGlja2VkKCk7XG4gICAgfSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgSGVhZGVyO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9SZXN0YXVyYW50RmlsdGVyX2luc3RhbmNlcywgX1Jlc3RhdXJhbnRGaWx0ZXJfcGFyZW50RWxlbWVudCwgX1Jlc3RhdXJhbnRGaWx0ZXJfcGFyZW50RXZlbnQsIF9SZXN0YXVyYW50RmlsdGVyX3NldExpc3RlbmVycywgX1Jlc3RhdXJhbnRGaWx0ZXJfY2xvc2VPck9wZW5TZWxlY3RGaWx0ZXIsIF9SZXN0YXVyYW50RmlsdGVyX3JlbmRlcjtcbmltcG9ydCB7ICQgfSBmcm9tICcuLi91dGlsL3F1ZXJ5U2VsZWN0b3InO1xuY2xhc3MgUmVzdGF1cmFudEZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoeyBwYXJlbnRFbGVtZW50LCBwYXJlbnRFdmVudCB9KSB7XG4gICAgICAgIF9SZXN0YXVyYW50RmlsdGVyX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50RmlsdGVyX3BhcmVudEVsZW1lbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50RmlsdGVyX3BhcmVudEV2ZW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50RmlsdGVyX3BhcmVudEVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEZpbHRlcl9wYXJlbnRFdmVudCwgcGFyZW50RXZlbnQsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZpbHRlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEZpbHRlcl9yZW5kZXIpLmNhbGwodGhpcyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGaWx0ZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRGaWx0ZXJfc2V0TGlzdGVuZXJzKS5jYWxsKHRoaXMpO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50RmlsdGVyX3BhcmVudEVsZW1lbnQgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEZpbHRlcl9wYXJlbnRFdmVudCA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50RmlsdGVyX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50RmlsdGVyX3NldExpc3RlbmVycyA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RmlsdGVyX3NldExpc3RlbmVycygpIHtcbiAgICAkKGAjY2F0ZWdvcnktZmlsdGVyYCkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hvaWNlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZpbHRlcl9wYXJlbnRFdmVudCwgXCJmXCIpLm9uRmlsdGVyQnlDaGFuZ2UobmV3Q2hvaWNlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgICQoYCNzb3J0aW5nLWZpbHRlcmApLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0Nob2ljZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGaWx0ZXJfcGFyZW50RXZlbnQsIFwiZlwiKS5vblNvcnRCeUNoYW5nZShuZXdDaG9pY2UpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgJChgI2Zhdm9yaXRlLWZpbHRlci1hbGxgKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZpbHRlcl9wYXJlbnRFdmVudCwgXCJmXCIpLm9uRmF2b3JpdGVCeUNoYW5nZSgnYWxsJyk7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RmlsdGVyX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50RmlsdGVyX2Nsb3NlT3JPcGVuU2VsZWN0RmlsdGVyKS5jYWxsKHRoaXMsICdvcGVuJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAkKGAjZmF2b3JpdGUtZmlsdGVyLWZhdm9yaXRlYCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGaWx0ZXJfcGFyZW50RXZlbnQsIFwiZlwiKS5vbkZhdm9yaXRlQnlDaGFuZ2UoJ2Zhdm9yaXRlJyk7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RmlsdGVyX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50RmlsdGVyX2Nsb3NlT3JPcGVuU2VsZWN0RmlsdGVyKS5jYWxsKHRoaXMsICdjbG9zZScpO1xuICAgICAgICB9XG4gICAgfSk7XG59LCBfUmVzdGF1cmFudEZpbHRlcl9jbG9zZU9yT3BlblNlbGVjdEZpbHRlciA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RmlsdGVyX2Nsb3NlT3JPcGVuU2VsZWN0RmlsdGVyKGNvbW1hbmQpIHtcbiAgICBjb21tYW5kID09PSAnb3BlbidcbiAgICAgICAgPyAoJChgI3Jlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lcmApLnN0eWxlLmRpc3BsYXkgPSAnZmxleCcpXG4gICAgICAgIDogKCQoYCNyZXN0YXVyYW50LWZpbHRlci1jb250YWluZXJgKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnKTtcbn0sIF9SZXN0YXVyYW50RmlsdGVyX3JlbmRlciA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RmlsdGVyX3JlbmRlcigpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGBcclxuICAgICAgPHNlY3Rpb24gY2xhc3M9XCJyZXN0YXVyYW50LWZhdm9yaXRlLWNvbnRhaW5lclwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmYXZvcml0ZS1tZW51XCI+XHJcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgaWQ9XCJmYXZvcml0ZS1maWx0ZXItYWxsXCIgbmFtZT1cImZhdm9yaXRlXCIgdmFsdWU9XCJhbGxcIiBjaGVja2VkIGhpZGRlbiAvPlxyXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZmF2b3JpdGUtcmFkaW9cIiBmb3I9XCJmYXZvcml0ZS1maWx0ZXItYWxsXCI+66qo65OgIOydjOyLneygkDwvbGFiZWw+XHJcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgaWQ9XCJmYXZvcml0ZS1maWx0ZXItZmF2b3JpdGVcIiBuYW1lPVwiZmF2b3JpdGVcIiB2YWx1ZT1cImZhdm9yaXRlXCIgaGlkZGVuIC8+XHJcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmYXZvcml0ZS1yYWRpb1wiIGZvcj1cImZhdm9yaXRlLWZpbHRlci1mYXZvcml0ZVwiPuyekOyjvCDqsIDripQg7J2M7Iud7KCQPC9sYWJlbD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICA8c2VjdGlvbiBjbGFzcz1cInJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lclwiIGlkPVwicmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyXCI+XHJcbiAgICAgICAgPHNlbGVjdCBuYW1lPVwiY2F0ZWdvcnlcIiBpZD1cImNhdGVnb3J5LWZpbHRlclwiIGNsYXNzPVwicmVzdGF1cmFudC1maWx0ZXJcIj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLsoITssrRcIj7soITssrQ8L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLtlZzsi51cIj7tlZzsi508L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLspJHsi51cIj7spJHsi508L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLsnbzsi51cIj7snbzsi508L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLslpHsi51cIj7slpHsi508L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLslYTsi5zslYhcIj7slYTsi5zslYg8L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLquLDtg4BcIj7quLDtg4A8L29wdGlvbj5cclxuICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICA8c2VsZWN0IG5hbWU9XCJzb3J0aW5nXCIgaWQ9XCJzb3J0aW5nLWZpbHRlclwiIGNsYXNzPVwicmVzdGF1cmFudC1maWx0ZXJcIj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJuYW1lXCI+7J2066aE7IicPC9vcHRpb24+XHJcbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZGlzdGFuY2VcIj7qsbDrpqzsiJw8L29wdGlvbj5cclxuICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgPC9zZWN0aW9uPlxyXG4gICAgYDtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RmlsdGVyX3BhcmVudEVsZW1lbnQsIFwiZlwiKS5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbn07XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50RmlsdGVyO1xuIiwiY29uc3QgUkVHRVggPSBPYmplY3QuZnJlZXplKHtcbiAgICBsaW5rOiAvXihodHRwcz86XFwvXFwvKT8od3d3XFwuKT8oW2EtekEtWjAtOS1dKylcXC4oW2Etel0rKS4qJC8sXG59KTtcbmNvbnN0IENBVEVHT1JZX0lNQUdFX1BBVEggPSBPYmplY3QuZnJlZXplKHtcbiAgICDtlZzsi506ICcuL2NhdGVnb3J5LWtvcmVhbi5wbmcnLFxuICAgIOykkeyLnTogJy4vY2F0ZWdvcnktY2hpbmVzZS5wbmcnLFxuICAgIOyWkeyLnTogJy4vY2F0ZWdvcnktd2VzdGVybi5wbmcnLFxuICAgIOydvOyLnTogJy4vY2F0ZWdvcnktamFwYW5lc2UucG5nJyxcbiAgICDslYTsi5zslYg6ICcuL2NhdGVnb3J5LWFzaWFuLnBuZycsXG4gICAg6riw7YOAOiAnLi9jYXRlZ29yeS1ldGMucG5nJyxcbn0pO1xuY29uc3QgRkFWT1JJVEVfSU1BR0VfUEFUSCA9IE9iamVjdC5mcmVlemUoe1xuICAgIHN0YXJyZWQ6ICcuL2Zhdm9yaXRlLWljb24tZmlsbGVkLnBuZycsXG4gICAgdW5zdGFycmVkOiAnLi9mYXZvcml0ZS1pY29uLWxpbmVkLnBuZycsXG59KTtcbmNvbnN0IEVSUk9SX01FU1NBR0UgPSB7XG4gICAgY2F0ZWdvcnlJc0VtcHR5OiAn7Lm07YWM6rOg66as66W8IOyEoO2Dne2VtCDso7zshLjsmpQhJyxcbiAgICBuYW1lSXNFbXB0eTogJ+ydjOyLneygkCDsnbTrpoTsnYQg7J6F66Cl7ZW0IOyjvOyEuOyalCEnLFxuICAgIGRpc3RhbmNlSW5NaW51dGVzSXNFbXB0eTogJ+qxsOumrOulvCDshKDtg53tlbQg7KO87IS47JqUIScsXG4gICAgbGlua0lzSW52YWxpZDogJ+yYrOuwlOuluCDso7zshozrpbwg7J6F66Cl7ZW0IOyjvOyEuOyalCEnLFxufTtcbmNvbnN0IFJFU1RBVVJBTlRfRElTVEFOQ0VTX0lOX01JTlVURSA9IFsnNScsICcxMCcsICcxNScsICcyMCcsICcyNScsICczMCddO1xuY29uc3QgUkVTVEFVUkFOVF9DQVRFR09SSUVTID0gW1xuICAgICftlZzsi50nLFxuICAgICfspJHsi50nLFxuICAgICfsnbzsi50nLFxuICAgICfslYTsi5zslYgnLFxuICAgICfslpHsi50nLFxuICAgICfquLDtg4AnLFxuXTtcbmNvbnN0IExPQ0FMX1NUT1JBR0VfS0VZID0gJ1JFU1RBVVJBTlRfQVBQJztcbmV4cG9ydCB7IFJFR0VYLCBFUlJPUl9NRVNTQUdFLCBDQVRFR09SWV9JTUFHRV9QQVRILCBGQVZPUklURV9JTUFHRV9QQVRILCBSRVNUQVVSQU5UX0RJU1RBTkNFU19JTl9NSU5VVEUsIFJFU1RBVVJBTlRfQ0FURUdPUklFUywgTE9DQUxfU1RPUkFHRV9LRVksIH07XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcywgX1Jlc3RhdXJhbnRJdGVtX3BhcmVudEVsZW1lbnQsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBfUmVzdGF1cmFudEl0ZW1fcGFyZW50RXZlbnQsIF9SZXN0YXVyYW50SXRlbV9yZW5kZXIsIF9SZXN0YXVyYW50SXRlbV9zZXRMaXN0ZW5lcnMsIF9SZXN0YXVyYW50SXRlbV9yZW1vdmVUZW1wb3JhcnlJZHM7XG5pbXBvcnQgeyBDQVRFR09SWV9JTUFHRV9QQVRILCBGQVZPUklURV9JTUFHRV9QQVRIIH0gZnJvbSAnLi4vLi4vY29uc3RhbnQnO1xuaW1wb3J0IHsgJCB9IGZyb20gJy4uLy4uL3V0aWwvcXVlcnlTZWxlY3Rvcic7XG5jbGFzcyBSZXN0YXVyYW50SXRlbSB7XG4gICAgY29uc3RydWN0b3IoeyBwYXJlbnRFbGVtZW50LCByZXN0YXVyYW50LCBwYXJlbnRFdmVudCB9KSB7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1fcGFyZW50RWxlbWVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbV9wYXJlbnRFdmVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcGFyZW50RWxlbWVudCwgcGFyZW50RWxlbWVudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCByZXN0YXVyYW50LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3BhcmVudEV2ZW50LCBwYXJlbnRFdmVudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1fcmVuZGVyKS5jYWxsKHRoaXMpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1fc2V0TGlzdGVuZXJzKS5jYWxsKHRoaXMpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1fcmVtb3ZlVGVtcG9yYXJ5SWRzKS5jYWxsKHRoaXMpO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50SXRlbV9wYXJlbnRFbGVtZW50ID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1fcGFyZW50RXZlbnQgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1Jlc3RhdXJhbnRJdGVtX3JlbmRlciA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50SXRlbV9yZW5kZXIoKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBgXHJcbiAgICAgIDxsaSBjbGFzcz1cInJlc3RhdXJhbnRcIiAke3R5cGVvZiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuaXRlbUlkID09PSAnbnVtYmVyJ1xuICAgICAgICA/IGBpZD1cInJlc3RhdXJhbnQtJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuaXRlbUlkfVwiYFxuICAgICAgICA6ICcnfT5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdGF1cmFudF9fY2F0ZWdvcnlcIj5cclxuICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgc3JjPVwiJHtDQVRFR09SWV9JTUFHRV9QQVRIW19fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQsIFwiZlwiKS5jYXRlZ29yeV0gfHxcbiAgICAgICAgQ0FURUdPUllfSU1BR0VfUEFUSFsn6riw7YOAJ119XCJcclxuICAgICAgICAgICAgYWx0PVwiJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuY2F0ZWdvcnl9XCJcclxuICAgICAgICAgICAgY2xhc3M9XCJjYXRlZ29yeS1pY29uXCJcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImZhdm9yaXRlLWljb25cIiAke3R5cGVvZiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuaXRlbUlkID09PSAnbnVtYmVyJ1xuICAgICAgICA/IGBpZD1cImZhdm9yaXRlLSR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCwgXCJmXCIpLml0ZW1JZH1cImBcbiAgICAgICAgOiAnJ30+XHJcbiAgICAgICAgICA8aW1nIHNyYz1cIiR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCwgXCJmXCIpLmlzRmF2b3JpdGVcbiAgICAgICAgPyBGQVZPUklURV9JTUFHRV9QQVRILnN0YXJyZWRcbiAgICAgICAgOiBGQVZPUklURV9JTUFHRV9QQVRILnVuc3RhcnJlZH1cIiBjbGFzcz1cImZhdm9yaXRlLWljb25cIiAvPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZXN0YXVyYW50X19pbmZvXCI+XHJcbiAgICAgICAgICA8aDMgY2xhc3M9XCJyZXN0YXVyYW50X19uYW1lIHRleHQtc3VidGl0bGVcIj4ke19fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQsIFwiZlwiKS5uYW1lfTwvaDM+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlc3RhdXJhbnRfX2Rpc3RhbmNlIHRleHQtYm9keVwiXHJcbiAgICAgICAgICAgID7suqDtjbzsiqTrtoDthLAgJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuZGlzdGFuY2VJbk1pbnV0ZXN967aEIOuCtDwvc3BhblxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgPHAgY2xhc3M9XCJyZXN0YXVyYW50X19kZXNjcmlwdGlvbiB0ZXh0LWJvZHlcIj5cclxuICAgICAgICAgICAgJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuZGVzY3JpcHRpb259XHJcbiAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICA8YSBjbGFzcz1cInJlc3RhdXJhbnRfX2xpbmtcIiBocmVmPVwiJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikubGlua31cIiB0YXJnZXQ9XCJfX2JsYW5rXCI+JHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikubGlua308L2E+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvbGk+XHJcbiAgICBgO1xuICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9wYXJlbnRFbGVtZW50LCBcImZcIikpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcGFyZW50RWxlbWVudCwgXCJmXCIpLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlRW5kJywgdGVtcGxhdGUpO1xuICAgIH1cbn0sIF9SZXN0YXVyYW50SXRlbV9zZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEl0ZW1fc2V0TGlzdGVuZXJzKCkge1xuICAgIGlmICh0eXBlb2YgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCwgXCJmXCIpLml0ZW1JZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgJChgI3Jlc3RhdXJhbnQtJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuaXRlbUlkfWApLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3BhcmVudEV2ZW50LCBcImZcIikgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3BhcmVudEV2ZW50LCBcImZcIikub25JdGVtQ2xpY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcGFyZW50RXZlbnQsIFwiZlwiKS5vbkl0ZW1DbGlja2VkKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQsIFwiZlwiKS5pdGVtSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJChgI2Zhdm9yaXRlLSR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCwgXCJmXCIpLml0ZW1JZH1gKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcGFyZW50RXZlbnQsIFwiZlwiKSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcGFyZW50RXZlbnQsIFwiZlwiKS5vbkZhdm9yaXRlQnV0dG9uQ2xpY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcGFyZW50RXZlbnQsIFwiZlwiKS5vbkZhdm9yaXRlQnV0dG9uQ2xpY2tlZChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuaXRlbUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufSwgX1Jlc3RhdXJhbnRJdGVtX3JlbW92ZVRlbXBvcmFyeUlkcyA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50SXRlbV9yZW1vdmVUZW1wb3JhcnlJZHMoKSB7XG4gICAgJChgI3Jlc3RhdXJhbnQtJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuaXRlbUlkfWApLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTtcbiAgICAkKGAjZmF2b3JpdGUtJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuaXRlbUlkfWApLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTtcbn07XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50SXRlbTtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfUmVzdGF1cmFudExpc3RfaW5zdGFuY2VzLCBfUmVzdGF1cmFudExpc3RfcGFyZW50RWxlbWVudCwgX1Jlc3RhdXJhbnRMaXN0X3Jlc3RhdXJhbnRzLCBfUmVzdGF1cmFudExpc3RfcGFyZW50RXZlbnQsIF9SZXN0YXVyYW50TGlzdF9yZW5kZXIsIF9SZXN0YXVyYW50TGlzdF9yZW5kZXJSZXN0YXVyYW50SXRlbXM7XG5pbXBvcnQgeyAkIH0gZnJvbSAnLi4vdXRpbC9xdWVyeVNlbGVjdG9yJztcbmltcG9ydCBSZXN0YXVyYW50SXRlbSBmcm9tICcuL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0nO1xuY2xhc3MgUmVzdGF1cmFudExpc3Qge1xuICAgIGNvbnN0cnVjdG9yKHsgcGFyZW50RWxlbWVudCwgcmVzdGF1cmFudHMsIHBhcmVudEV2ZW50IH0pIHtcbiAgICAgICAgX1Jlc3RhdXJhbnRMaXN0X2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50TGlzdF9wYXJlbnRFbGVtZW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50TGlzdF9wYXJlbnRFdmVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfcGFyZW50RWxlbWVudCwgcGFyZW50RWxlbWVudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50TGlzdF9yZXN0YXVyYW50cywgcmVzdGF1cmFudHMsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfcGFyZW50RXZlbnQsIHBhcmVudEV2ZW50LCBcImZcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3RhdXJhbnRzKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRMaXN0X3JlbmRlcikuY2FsbCh0aGlzKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRMaXN0X3JlbmRlclJlc3RhdXJhbnRJdGVtcykuY2FsbCh0aGlzKTtcbiAgICB9XG59XG5fUmVzdGF1cmFudExpc3RfcGFyZW50RWxlbWVudCA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50TGlzdF9yZXN0YXVyYW50cyA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50TGlzdF9wYXJlbnRFdmVudCA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50TGlzdF9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfUmVzdGF1cmFudExpc3RfcmVuZGVyID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRMaXN0X3JlbmRlcigpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGBcclxuICAgICAgPHVsIGNsYXNzPVwicmVzdGF1cmFudHMtbGlzdFwiIGlkPVwicmVzdGF1cmFudC1saXN0XCI+PC91bD5cclxuICAgIGA7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfcGFyZW50RWxlbWVudCwgXCJmXCIpLmlubmVySFRNTCA9IHRlbXBsYXRlO1xufSwgX1Jlc3RhdXJhbnRMaXN0X3JlbmRlclJlc3RhdXJhbnRJdGVtcyA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50TGlzdF9yZW5kZXJSZXN0YXVyYW50SXRlbXMoKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMsIFwiZlwiKS5mb3JFYWNoKChyZXN0YXVyYW50KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3RhdXJhbnQsIHJlc3RhdXJhbnQuaXRlbUlkKTtcbiAgICAgICAgbmV3IFJlc3RhdXJhbnRJdGVtKHtcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQ6ICQoYCNyZXN0YXVyYW50LWxpc3RgKSxcbiAgICAgICAgICAgIHJlc3RhdXJhbnQ6IHJlc3RhdXJhbnQsXG4gICAgICAgICAgICBwYXJlbnRFdmVudDoge1xuICAgICAgICAgICAgICAgIG9uSXRlbUNsaWNrZWQ6IChpdGVtSWQpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRMaXN0X3BhcmVudEV2ZW50LCBcImZcIikub25SZXN0YXVyYW50SXRlbUNsaWNrZWQoaXRlbUlkKSxcbiAgICAgICAgICAgICAgICBvbkZhdm9yaXRlQnV0dG9uQ2xpY2tlZDogKGl0ZW1JZCkgPT4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfcGFyZW50RXZlbnQsIFwiZlwiKS5vbkZhdm9yaXRlQnV0dG9uQ2xpY2tlZChpdGVtSWQpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudExpc3Q7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX01vZGFsX2luc3RhbmNlcywgX01vZGFsX3BhcmVudEVsZW1lbnQsIF9Nb2RhbF9pbmZvLCBfTW9kYWxfcmVuZGVyLCBfTW9kYWxfYWRkTGlzdGVuZXJzO1xuaW1wb3J0IHsgJCB9IGZyb20gJy4uLy4uL3V0aWwvcXVlcnlTZWxlY3Rvcic7XG5jbGFzcyBNb2RhbCB7XG4gICAgY29uc3RydWN0b3IoeyBwYXJlbnRFbGVtZW50LCBpbmZvIH0pIHtcbiAgICAgICAgX01vZGFsX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9Nb2RhbF9wYXJlbnRFbGVtZW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfTW9kYWxfaW5mby5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfTW9kYWxfcGFyZW50RWxlbWVudCwgcGFyZW50RWxlbWVudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Nb2RhbF9pbmZvLCBpbmZvLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9Nb2RhbF9yZW5kZXIpLmNhbGwodGhpcyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9Nb2RhbF9hZGRMaXN0ZW5lcnMpLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIGNsb3NlT3JPcGVuTW9kYWwoY29tbWFuZCkge1xuICAgICAgICBjb25zdCBtb2RhbEVsZW1lbnQgPSAkKGAjJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb2RhbF9pbmZvLCBcImZcIikuaWR9YCk7XG4gICAgICAgIGlmIChtb2RhbEVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRGlhbG9nRWxlbWVudCkge1xuICAgICAgICAgICAgY29tbWFuZCA9PT0gJ29wZW4nXG4gICAgICAgICAgICAgICAgPyBtb2RhbEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbW9kYWwtLW9wZW4nKVxuICAgICAgICAgICAgICAgIDogbW9kYWxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLS1vcGVuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmlsbENvbnRlbnRzKHRlbXBsYXRlKSB7XG4gICAgICAgICQoYCMke19fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZGFsX2luZm8sIFwiZlwiKS5pbm5lcklkfWApLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgIH1cbn1cbl9Nb2RhbF9wYXJlbnRFbGVtZW50ID0gbmV3IFdlYWtNYXAoKSwgX01vZGFsX2luZm8gPSBuZXcgV2Vha01hcCgpLCBfTW9kYWxfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX01vZGFsX3JlbmRlciA9IGZ1bmN0aW9uIF9Nb2RhbF9yZW5kZXIoKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBgXHJcbiAgICAgIDxkaWFsb2cgY2xhc3M9XCJtb2RhbFwiIGlkPVwiJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb2RhbF9pbmZvLCBcImZcIikuaWR9XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJhY2tkcm9wXCI+PC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgIDxkaXYgaWQ9XCIke19fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZGFsX2luZm8sIFwiZlwiKS5pbm5lcklkfVwiPjwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGlhbG9nPmA7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kYWxfcGFyZW50RWxlbWVudCwgXCJmXCIpLmlubmVySFRNTCA9IHRlbXBsYXRlO1xufSwgX01vZGFsX2FkZExpc3RlbmVycyA9IGZ1bmN0aW9uIF9Nb2RhbF9hZGRMaXN0ZW5lcnMoKSB7XG4gICAgJChgIyR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kYWxfaW5mbywgXCJmXCIpLmlkfSAubW9kYWwtYmFja2Ryb3BgKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5jbG9zZU9yT3Blbk1vZGFsKCdjbG9zZScpO1xuICAgIH0pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VPck9wZW5Nb2RhbCgnY2xvc2UnKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IE1vZGFsO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9Ud2luQnV0dG9uc19pbnN0YW5jZXMsIF9Ud2luQnV0dG9uc19wYXJlbnRFbGVtZW50LCBfVHdpbkJ1dHRvbnNfaW5mbywgX1R3aW5CdXR0b25zX3BhcmVudEV2ZW50LCBfVHdpbkJ1dHRvbnNfcmVuZGVyLCBfVHdpbkJ1dHRvbnNfYWRkTGlzdGVuZXJzO1xuaW1wb3J0IHsgJCB9IGZyb20gJy4uLy4uL3V0aWwvcXVlcnlTZWxlY3Rvcic7XG5jbGFzcyBUd2luQnV0dG9ucyB7XG4gICAgY29uc3RydWN0b3IoeyBwYXJlbnRFbGVtZW50LCBpbmZvLCBwYXJlbnRFdmVudCB9KSB7XG4gICAgICAgIF9Ud2luQnV0dG9uc19pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfVHdpbkJ1dHRvbnNfcGFyZW50RWxlbWVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1R3aW5CdXR0b25zX2luZm8uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9Ud2luQnV0dG9uc19wYXJlbnRFdmVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfVHdpbkJ1dHRvbnNfcGFyZW50RWxlbWVudCwgcGFyZW50RWxlbWVudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Ud2luQnV0dG9uc19pbmZvLCBpbmZvLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1R3aW5CdXR0b25zX3BhcmVudEV2ZW50LCBwYXJlbnRFdmVudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ud2luQnV0dG9uc19pbnN0YW5jZXMsIFwibVwiLCBfVHdpbkJ1dHRvbnNfcmVuZGVyKS5jYWxsKHRoaXMpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ud2luQnV0dG9uc19pbnN0YW5jZXMsIFwibVwiLCBfVHdpbkJ1dHRvbnNfYWRkTGlzdGVuZXJzKS5jYWxsKHRoaXMpO1xuICAgIH1cbn1cbl9Ud2luQnV0dG9uc19wYXJlbnRFbGVtZW50ID0gbmV3IFdlYWtNYXAoKSwgX1R3aW5CdXR0b25zX2luZm8gPSBuZXcgV2Vha01hcCgpLCBfVHdpbkJ1dHRvbnNfcGFyZW50RXZlbnQgPSBuZXcgV2Vha01hcCgpLCBfVHdpbkJ1dHRvbnNfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1R3aW5CdXR0b25zX3JlbmRlciA9IGZ1bmN0aW9uIF9Ud2luQnV0dG9uc19yZW5kZXIoKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBgXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24tY29udGFpbmVyXCI+XHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidXR0b24gYnV0dG9uLS1zZWNvbmRhcnkgdGV4dC1jYXB0aW9uXCIgaWQ9XCIke19fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1R3aW5CdXR0b25zX2luZm8sIFwiZlwiKS5sZWZ0QnV0dG9uSWR9XCI+JHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ud2luQnV0dG9uc19pbmZvLCBcImZcIikubGVmdEJ1dHRvbk5hbWV9PC9idXR0b24+XHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ1dHRvbiBidXR0b24tLXByaW1hcnkgdGV4dC1jYXB0aW9uXCIgaWQ9XCIke19fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1R3aW5CdXR0b25zX2luZm8sIFwiZlwiKS5yaWdodEJ1dHRvbklkfVwiPiR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVHdpbkJ1dHRvbnNfaW5mbywgXCJmXCIpLnJpZ2h0QnV0dG9uTmFtZX08L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgO1xuICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ud2luQnV0dG9uc19wYXJlbnRFbGVtZW50LCBcImZcIikpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVHdpbkJ1dHRvbnNfcGFyZW50RWxlbWVudCwgXCJmXCIpLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlRW5kJywgdGVtcGxhdGUpO1xuICAgIH1cbn0sIF9Ud2luQnV0dG9uc19hZGRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfVHdpbkJ1dHRvbnNfYWRkTGlzdGVuZXJzKCkge1xuICAgICQoYCMke19fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1R3aW5CdXR0b25zX2luZm8sIFwiZlwiKS5sZWZ0QnV0dG9uSWR9YCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ud2luQnV0dG9uc19wYXJlbnRFdmVudCwgXCJmXCIpLm9uTGVmdEJ1dHRvbkNsaWNrZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVHdpbkJ1dHRvbnNfcGFyZW50RXZlbnQsIFwiZlwiKS5vbkxlZnRCdXR0b25DbGlja2VkKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAkKGAjJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ud2luQnV0dG9uc19pbmZvLCBcImZcIikucmlnaHRCdXR0b25JZH1gKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgaWYgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1R3aW5CdXR0b25zX3BhcmVudEV2ZW50LCBcImZcIikub25SaWdodEJ1dHRvbkNsaWNrZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVHdpbkJ1dHRvbnNfcGFyZW50RXZlbnQsIFwiZlwiKS5vblJpZ2h0QnV0dG9uQ2xpY2tlZCgpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgVHdpbkJ1dHRvbnM7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3RhdXJhbnRBZGRNb2RhbF9pbnN0YW5jZXMsIF9SZXN0YXVyYW50QWRkTW9kYWxfcGFyZW50RWxlbWVudCwgX1Jlc3RhdXJhbnRBZGRNb2RhbF9wYXJlbnRFdmVudCwgX1Jlc3RhdXJhbnRBZGRNb2RhbF9tb2RhbCwgX1Jlc3RhdXJhbnRBZGRNb2RhbF9maWxsQ29udGVudHNJbk1vZGFsLCBfUmVzdGF1cmFudEFkZE1vZGFsX3NldExpc3RlbmVycztcbmltcG9ydCB7ICQsICQkIH0gZnJvbSAnLi4vdXRpbC9xdWVyeVNlbGVjdG9yJztcbmltcG9ydCBNb2RhbCBmcm9tICcuL2NvbXBvbmVudHMvTW9kYWwnO1xuaW1wb3J0IGdldEZvcm1EYXRhIGZyb20gJy4uL3V0aWwvZ2V0Rm9ybURhdGEnO1xuaW1wb3J0IFR3aW5CdXR0b25zIGZyb20gJy4vY29tcG9uZW50cy9Ud2luQnV0dG9ucyc7XG5jbGFzcyBSZXN0YXVyYW50QWRkTW9kYWwge1xuICAgIGNvbnN0cnVjdG9yKHsgcGFyZW50RWxlbWVudCwgcGFyZW50RXZlbnQgfSkge1xuICAgICAgICBfUmVzdGF1cmFudEFkZE1vZGFsX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50QWRkTW9kYWxfcGFyZW50RWxlbWVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRBZGRNb2RhbF9wYXJlbnRFdmVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRBZGRNb2RhbF9tb2RhbC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEFkZE1vZGFsX3BhcmVudEVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEFkZE1vZGFsX3BhcmVudEV2ZW50LCBwYXJlbnRFdmVudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50QWRkTW9kYWxfbW9kYWwsIG5ldyBNb2RhbCh7XG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50QWRkTW9kYWxfcGFyZW50RWxlbWVudCwgXCJmXCIpLFxuICAgICAgICAgICAgaW5mbzoge1xuICAgICAgICAgICAgICAgIGlkOiAncmVzdGF1cmFudC1hZGQtbW9kYWwnLFxuICAgICAgICAgICAgICAgIGlubmVySWQ6ICdyZXN0YXVyYW50LWFkZC1tb2RhbC1jb250ZW50cycsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50QWRkTW9kYWxfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRBZGRNb2RhbF9maWxsQ29udGVudHNJbk1vZGFsKS5jYWxsKHRoaXMpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50QWRkTW9kYWxfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRBZGRNb2RhbF9zZXRMaXN0ZW5lcnMpLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIGNsb3NlT3JPcGVuTW9kYWwoY29tbWFuZCkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50QWRkTW9kYWxfbW9kYWwsIFwiZlwiKS5jbG9zZU9yT3Blbk1vZGFsKGNvbW1hbmQpO1xuICAgIH1cbiAgICBzaG93RXJyb3JNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgJChgI2Vycm9yLWl0ZW1gKS5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgICAgICAkKGAjZXJyb3ItdGV4dGApLmlubmVyVGV4dCA9IG1lc3NhZ2U7XG4gICAgfVxuICAgIGhpZGVFcnJvck1lc3NhZ2UoKSB7XG4gICAgICAgICQoYCNlcnJvci1pdGVtYCkuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICB9XG4gICAgY2xlYXJBbGxJbnB1dHMoKSB7XG4gICAgICAgICQkKCcjbW9kYWwtYWRkLWZvcm0gaW5wdXQsICNtb2RhbC1hZGQtZm9ybSB0ZXh0YXJlYSwgI21vZGFsLWFkZC1mb3JtIHNlbGVjdCcpLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50IHx8XG4gICAgICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBIVE1MVGV4dEFyZWFFbGVtZW50IHx8XG4gICAgICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50QWRkTW9kYWxfcGFyZW50RWxlbWVudCA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50QWRkTW9kYWxfcGFyZW50RXZlbnQgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEFkZE1vZGFsX21vZGFsID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRBZGRNb2RhbF9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfUmVzdGF1cmFudEFkZE1vZGFsX2ZpbGxDb250ZW50c0luTW9kYWwgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEFkZE1vZGFsX2ZpbGxDb250ZW50c0luTW9kYWwoKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBgXHJcbiAgICAgIDxoMiBjbGFzcz1cIm1vZGFsLXRpdGxlIHRleHQtdGl0bGVcIj7sg4jroZzsmrQg7J2M7Iud7KCQPC9oMj5cclxuICAgICAgPGZvcm0gaWQ9XCJtb2RhbC1hZGQtZm9ybVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWl0ZW0gZm9ybS1pdGVtLS1yZXF1aXJlZFwiPlxyXG4gICAgICAgICAgPGxhYmVsIGZvcj1cImNhdGVnb3J5IHRleHQtY2FwdGlvblwiPuy5tO2FjOqzoOumrDwvbGFiZWw+XHJcbiAgICAgICAgICA8c2VsZWN0IG5hbWU9XCJjYXRlZ29yeVwiIGlkPVwiY2F0ZWdvcnlcIiByZXF1aXJlZD5cclxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPuyEoO2Dne2VtCDso7zshLjsmpQ8L29wdGlvbj5cclxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIu2VnOyLnVwiPu2VnOyLnTwvb3B0aW9uPlxyXG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwi7KSR7IudXCI+7KSR7IudPC9vcHRpb24+XHJcbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLsnbzsi51cIj7snbzsi508L29wdGlvbj5cclxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIuyWkeyLnVwiPuyWkeyLnTwvb3B0aW9uPlxyXG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwi7JWE7Iuc7JWIXCI+7JWE7Iuc7JWIPC9vcHRpb24+XHJcbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLquLDtg4BcIj7quLDtg4A8L29wdGlvbj5cclxuICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWl0ZW0gZm9ybS1pdGVtLS1yZXF1aXJlZFwiPlxyXG4gICAgICAgICAgPGxhYmVsIGZvcj1cIm5hbWVcIj7snbTrpoQ8L2xhYmVsPlxyXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cIm5hbWVcIiBpZD1cIm5hbWVcIiByZXF1aXJlZD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pdGVtIGZvcm0taXRlbS0tcmVxdWlyZWRcIj5cclxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJkaXN0YW5jZVwiPuqxsOumrCjrj4Trs7Qg7J2064+ZIOyLnOqwhCkgPC9sYWJlbD5cclxuICAgICAgICAgIDxzZWxlY3QgbmFtZT1cImRpc3RhbmNlSW5NaW51dGVzXCIgaWQ9XCJkaXN0YW5jZVwiIHJlcXVpcmVkPlxyXG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+7ISg7YOd7ZW0IOyjvOyEuOyalDwvb3B0aW9uPlxyXG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiNVwiPjXrtoQg64K0PC9vcHRpb24+XHJcbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIxMFwiPjEw67aEIOuCtDwvb3B0aW9uPlxyXG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMTVcIj4xNeu2hCDrgrQ8L29wdGlvbj5cclxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjIwXCI+MjDrtoQg64K0PC9vcHRpb24+XHJcbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIzMFwiPjMw67aEIOuCtDwvb3B0aW9uPlxyXG4gICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0taXRlbVwiPlxyXG4gICAgICAgICAgPGxhYmVsIGZvcj1cImRlc2NyaXB0aW9uXCI+7ISk66qFPC9sYWJlbD5cclxuICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPVwiZGVzY3JpcHRpb25cIiBpZD1cImRlc2NyaXB0aW9uXCIgY29scz1cIjMwXCIgcm93cz1cIjVcIj48L3RleHRhcmVhPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJoZWxwLXRleHQgdGV4dC1jYXB0aW9uXCI+66mU64m0IOuTsSDstpTqsIAg7KCV67O066W8IOyeheugpe2VtCDso7zshLjsmpQuPC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWl0ZW1cIj5cclxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJsaW5rXCI+7LC46rOgIOunge2BrDwvbGFiZWw+XHJcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibGlua1wiIGlkPVwibGlua1wiPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJoZWxwLXRleHQgdGV4dC1jYXB0aW9uXCI+66ek7J6lIOygleuztOulvCDtmZXsnbjtlaAg7IiYIOyeiOuKlCDrp4Htgazrpbwg7J6F66Cl7ZW0IOyjvOyEuOyalC48L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImVycm9yLWl0ZW1cIiBpZD1cImVycm9yLWl0ZW1cIj5cclxuICAgICAgICAgIDxpbWcgY2xhc3M9XCJlcnJvci1pbWFnZVwiIHNyYz1cIi4vZXJyb3ItaWNvbi5wbmdcIiAvPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImVycm9yLXRleHQgdGV4dC1jYXB0aW9uXCIgaWQ9XCJlcnJvci10ZXh0XCI+PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Zvcm0+XHJcbiAgICBgO1xuICAgICQoJyNyZXN0YXVyYW50LWFkZC1tb2RhbC1jb250ZW50cycpLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgIG5ldyBUd2luQnV0dG9ucyh7XG4gICAgICAgIHBhcmVudEVsZW1lbnQ6ICQoJyNtb2RhbC1hZGQtZm9ybScpLFxuICAgICAgICBpbmZvOiB7XG4gICAgICAgICAgICBsZWZ0QnV0dG9uSWQ6ICdhZGQtbW9kYWwtY2FuY2VsJyxcbiAgICAgICAgICAgIHJpZ2h0QnV0dG9uSWQ6ICdhZGQtbW9kYWwtc3VibWl0JyxcbiAgICAgICAgICAgIGxlZnRCdXR0b25OYW1lOiAn7Leo7IaM7ZWY6riwJyxcbiAgICAgICAgICAgIHJpZ2h0QnV0dG9uTmFtZTogJ+y2lOqwgO2VmOq4sCcsXG4gICAgICAgIH0sXG4gICAgICAgIHBhcmVudEV2ZW50OiB7XG4gICAgICAgICAgICBvbkxlZnRCdXR0b25DbGlja2VkOiAoKSA9PiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50QWRkTW9kYWxfcGFyZW50RXZlbnQsIFwiZlwiKS5vbk1vZGFsQ2FuY2VsQnV0dG9uQ2xpY2tlZCgpLFxuICAgICAgICB9LFxuICAgIH0pO1xufSwgX1Jlc3RhdXJhbnRBZGRNb2RhbF9zZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEFkZE1vZGFsX3NldExpc3RlbmVycygpIHtcbiAgICBjb25zdCAkbW9kYWxBZGRGb3JtID0gJChgI21vZGFsLWFkZC1mb3JtYCk7XG4gICAgJG1vZGFsQWRkRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKCRtb2RhbEFkZEZvcm0gaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3RhdXJhbnREYXRhID0gZ2V0Rm9ybURhdGEoJG1vZGFsQWRkRm9ybSk7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50QWRkTW9kYWxfcGFyZW50RXZlbnQsIFwiZlwiKS5vbk1vZGFsQWRkQnV0dG9uQ2xpY2tlZChyZXN0YXVyYW50RGF0YSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50QWRkTW9kYWw7XG4iLCJjb25zdCBnZXRGb3JtRGF0YSA9IChmb3JtRWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm1FbGVtZW50KTtcbiAgICBjb25zdCBjb252ZXJ0ZWREYXRhID0gT2JqZWN0LmZyb21FbnRyaWVzKGZvcm1EYXRhLmVudHJpZXMoKSk7XG4gICAgcmV0dXJuIGNvbnZlcnRlZERhdGE7XG59O1xuZXhwb3J0IGRlZmF1bHQgZ2V0Rm9ybURhdGE7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3RhdXJhbnRJbmZvTW9kYWxfcGFyZW50RWxlbWVudCwgX1Jlc3RhdXJhbnRJbmZvTW9kYWxfcGFyZW50RXZlbnQsIF9SZXN0YXVyYW50SW5mb01vZGFsX21vZGFsO1xuaW1wb3J0IHsgJCB9IGZyb20gJy4uL3V0aWwvcXVlcnlTZWxlY3Rvcic7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi9jb21wb25lbnRzL01vZGFsJztcbmltcG9ydCBSZXN0YXVyYW50SXRlbSBmcm9tICcuL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0nO1xuaW1wb3J0IFR3aW5CdXR0b25zIGZyb20gJy4vY29tcG9uZW50cy9Ud2luQnV0dG9ucyc7XG5jbGFzcyBSZXN0YXVyYW50SW5mb01vZGFsIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHBhcmVudEVsZW1lbnQsIHBhcmVudEV2ZW50IH0pIHtcbiAgICAgICAgX1Jlc3RhdXJhbnRJbmZvTW9kYWxfcGFyZW50RWxlbWVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJbmZvTW9kYWxfcGFyZW50RXZlbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50SW5mb01vZGFsX21vZGFsLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SW5mb01vZGFsX3BhcmVudEVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEluZm9Nb2RhbF9wYXJlbnRFdmVudCwgcGFyZW50RXZlbnQsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEluZm9Nb2RhbF9tb2RhbCwgbmV3IE1vZGFsKHtcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQ6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJbmZvTW9kYWxfcGFyZW50RWxlbWVudCwgXCJmXCIpLFxuICAgICAgICAgICAgaW5mbzoge1xuICAgICAgICAgICAgICAgIGlkOiAncmVzdGF1cmFudC1pbmZvLW1vZGFsJyxcbiAgICAgICAgICAgICAgICBpbm5lcklkOiAncmVzdGF1cmFudC1pbmZvLW1vZGFsLWNvbnRlbnRzJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLCBcImZcIik7XG4gICAgfVxuICAgIGNsb3NlT3JPcGVuTW9kYWwoY29tbWFuZCkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SW5mb01vZGFsX21vZGFsLCBcImZcIikuY2xvc2VPck9wZW5Nb2RhbChjb21tYW5kKTtcbiAgICB9XG4gICAgdXBkYXRlUmVzdGF1cmFudEluZm8ocmVzdGF1cmFudCkge1xuICAgICAgICAkKCcjcmVzdGF1cmFudC1pbmZvLW1vZGFsLWNvbnRlbnRzJykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIG5ldyBSZXN0YXVyYW50SXRlbSh7XG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50OiAkKCcjcmVzdGF1cmFudC1pbmZvLW1vZGFsLWNvbnRlbnRzJyksXG4gICAgICAgICAgICByZXN0YXVyYW50OiByZXN0YXVyYW50LFxuICAgICAgICAgICAgcGFyZW50RXZlbnQ6IHtcbiAgICAgICAgICAgICAgICBvbkZhdm9yaXRlQnV0dG9uQ2xpY2tlZDogKGl0ZW1JZCkgPT4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEluZm9Nb2RhbF9wYXJlbnRFdmVudCwgXCJmXCIpLm9uRmF2b3JpdGVCdXR0b25DbGlja2VkKGl0ZW1JZCksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgbmV3IFR3aW5CdXR0b25zKHtcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQ6ICQoJyNyZXN0YXVyYW50LWluZm8tbW9kYWwtY29udGVudHMnKSxcbiAgICAgICAgICAgIGluZm86IHtcbiAgICAgICAgICAgICAgICBsZWZ0QnV0dG9uSWQ6ICdpbmZvLW1vZGFsLWRlbGV0ZScsXG4gICAgICAgICAgICAgICAgcmlnaHRCdXR0b25JZDogJ2luZm8tbW9kYWwtY2xvc2UnLFxuICAgICAgICAgICAgICAgIGxlZnRCdXR0b25OYW1lOiAn7IKt7KCc7ZWY6riwJyxcbiAgICAgICAgICAgICAgICByaWdodEJ1dHRvbk5hbWU6ICfri6vquLAnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhcmVudEV2ZW50OiB7XG4gICAgICAgICAgICAgICAgb25MZWZ0QnV0dG9uQ2xpY2tlZDogKCkgPT4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEluZm9Nb2RhbF9wYXJlbnRFdmVudCwgXCJmXCIpLm9uRGVsZXRlQnV0dG9uQ2xpY2tlZChyZXN0YXVyYW50Lml0ZW1JZCksXG4gICAgICAgICAgICAgICAgb25SaWdodEJ1dHRvbkNsaWNrZWQ6ICgpID0+IHRoaXMuY2xvc2VPck9wZW5Nb2RhbCgnY2xvc2UnKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvcGVuSW5mb01vZGFsKHJlc3RhdXJhbnQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVSZXN0YXVyYW50SW5mbyhyZXN0YXVyYW50KTtcbiAgICAgICAgdGhpcy5jbG9zZU9yT3Blbk1vZGFsKCdvcGVuJyk7XG4gICAgfVxufVxuX1Jlc3RhdXJhbnRJbmZvTW9kYWxfcGFyZW50RWxlbWVudCA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SW5mb01vZGFsX3BhcmVudEV2ZW50ID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRJbmZvTW9kYWxfbW9kYWwgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudEluZm9Nb2RhbDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfTHVuY2hBcHBWaWV3X2luc3RhbmNlcywgX0x1bmNoQXBwVmlld19wYXJlbnRFbGVtZW50LCBfTHVuY2hBcHBWaWV3X3BhcmVudEV2ZW50LCBfTHVuY2hBcHBWaWV3X3Jlc3RhdXJhbnRBZGRNb2RhbCwgX0x1bmNoQXBwVmlld19yZXN0YXVyYW50SW5mb01vZGFsLCBfTHVuY2hBcHBWaWV3X3JlbmRlciwgX0x1bmNoQXBwVmlld19yZW5kZXJDaGlsZCwgX0x1bmNoQXBwVmlld19yZW5kZXJIZWFkZXIsIF9MdW5jaEFwcFZpZXdfcmVuZGVyRmlsdGVyLCBfTHVuY2hBcHBWaWV3X3JlbmRlclJlc3RhdXJhbnRzLCBfTHVuY2hBcHBWaWV3X3JlbmRlckFkZE1vZGFsLCBfTHVuY2hBcHBWaWV3X3JlbmRlckluZm9Nb2RhbDtcbmltcG9ydCB7ICQgfSBmcm9tICcuLi91dGlsL3F1ZXJ5U2VsZWN0b3InO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL0hlYWRlcic7XG5pbXBvcnQgUmVzdGF1cmFudEZpbHRlciBmcm9tICcuL1Jlc3RhdXJhbnRGaWx0ZXInO1xuaW1wb3J0IFJlc3RhdXJhbnRMaXN0IGZyb20gJy4vUmVzdGF1cmFudExpc3QnO1xuaW1wb3J0IFJlc3RhdXJhbnRBZGRNb2RhbCBmcm9tICcuL1Jlc3RhdXJhbnRBZGRNb2RhbCc7XG5pbXBvcnQgUmVzdGF1cmFudEluZm9Nb2RhbCBmcm9tICcuL1Jlc3RhdXJhbnRJbmZvTW9kYWwnO1xuY2xhc3MgTHVuY2hBcHBWaWV3IHtcbiAgICBjb25zdHJ1Y3Rvcih7IHBhcmVudEVsZW1lbnQsIHJlc3RhdXJhbnRzLCBwYXJlbnRFdmVudCB9KSB7XG4gICAgICAgIF9MdW5jaEFwcFZpZXdfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX0x1bmNoQXBwVmlld19wYXJlbnRFbGVtZW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfTHVuY2hBcHBWaWV3X3BhcmVudEV2ZW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfTHVuY2hBcHBWaWV3X3Jlc3RhdXJhbnRBZGRNb2RhbC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0x1bmNoQXBwVmlld19yZXN0YXVyYW50SW5mb01vZGFsLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfcGFyZW50RWxlbWVudCwgcGFyZW50RWxlbWVudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfcGFyZW50RXZlbnQsIHBhcmVudEV2ZW50LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwVmlld19pbnN0YW5jZXMsIFwibVwiLCBfTHVuY2hBcHBWaWV3X3JlbmRlcikuY2FsbCh0aGlzKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBWaWV3X2luc3RhbmNlcywgXCJtXCIsIF9MdW5jaEFwcFZpZXdfcmVuZGVyQ2hpbGQpLmNhbGwodGhpcywgcmVzdGF1cmFudHMpO1xuICAgIH1cbiAgICB1cGRhdGVSZXN0YXVyYW50cyhyZXN0YXVyYW50cykge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfaW5zdGFuY2VzLCBcIm1cIiwgX0x1bmNoQXBwVmlld19yZW5kZXJSZXN0YXVyYW50cykuY2FsbCh0aGlzLCByZXN0YXVyYW50cyk7XG4gICAgfVxuICAgIGNsb3NlT3JPcGVuUmVzdGF1cmFudEFkZE1vZGFsKGNvbW1hbmQpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBWaWV3X3Jlc3RhdXJhbnRBZGRNb2RhbCwgXCJmXCIpLmNsb3NlT3JPcGVuTW9kYWwoY29tbWFuZCk7XG4gICAgfVxuICAgIGNsb3NlT3JPcGVuUmVzdGF1cmFudEluZm9Nb2RhbChjb21tYW5kKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwVmlld19yZXN0YXVyYW50SW5mb01vZGFsLCBcImZcIikuY2xvc2VPck9wZW5Nb2RhbChjb21tYW5kKTtcbiAgICB9XG4gICAgY2xlYXJBbGxNb2RhbElucHV0cygpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBWaWV3X3Jlc3RhdXJhbnRBZGRNb2RhbCwgXCJmXCIpLmNsZWFyQWxsSW5wdXRzKCk7XG4gICAgfVxuICAgIHVwZGF0ZVJlc3RhdXJhbnRJbmZvKHJlc3RhdXJhbnQpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBWaWV3X3Jlc3RhdXJhbnRJbmZvTW9kYWwsIFwiZlwiKS51cGRhdGVSZXN0YXVyYW50SW5mbyhyZXN0YXVyYW50KTtcbiAgICB9XG4gICAgc2hvd1Jlc3RhdXJhbnRBZGRNb2RhbEVycm9yTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwVmlld19yZXN0YXVyYW50QWRkTW9kYWwsIFwiZlwiKS5zaG93RXJyb3JNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBoaWRlUmVzdGF1cmFudEFkZE1vZGFsRXJyb3JNZXNzYWdlKCkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfcmVzdGF1cmFudEFkZE1vZGFsLCBcImZcIikuaGlkZUVycm9yTWVzc2FnZSgpO1xuICAgIH1cbn1cbl9MdW5jaEFwcFZpZXdfcGFyZW50RWxlbWVudCA9IG5ldyBXZWFrTWFwKCksIF9MdW5jaEFwcFZpZXdfcGFyZW50RXZlbnQgPSBuZXcgV2Vha01hcCgpLCBfTHVuY2hBcHBWaWV3X3Jlc3RhdXJhbnRBZGRNb2RhbCA9IG5ldyBXZWFrTWFwKCksIF9MdW5jaEFwcFZpZXdfcmVzdGF1cmFudEluZm9Nb2RhbCA9IG5ldyBXZWFrTWFwKCksIF9MdW5jaEFwcFZpZXdfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX0x1bmNoQXBwVmlld19yZW5kZXIgPSBmdW5jdGlvbiBfTHVuY2hBcHBWaWV3X3JlbmRlcigpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGBcclxuICAgICAgPGRpdiBpZD1cImhlYWRlci1yb290XCI+PC9kaXY+XHJcbiAgICAgIDxtYWluIGlkPVwiYXBwLW1haW5cIj5cclxuICAgICAgICA8ZGl2IGlkPVwiZmlsdGVyLXJvb3RcIj48L2Rpdj5cclxuICAgICAgICA8c2VjdGlvblxyXG4gICAgICAgICAgY2xhc3M9XCJyZXN0YXVyYW50LWxpc3QtY29udGFpbmVyXCJcclxuICAgICAgICAgIGlkPVwicmVzdGF1cmFudC1saXN0LXJvb3RcIlxyXG4gICAgICAgID48L3NlY3Rpb24+XHJcbiAgICAgICAgPGRpdiBpZD1cInJlc3RhdXJhbnQtYWRkLW1vZGFsLXJvb3RcIj48L2Rpdj5cclxuICAgICAgICA8ZGl2IGlkPVwicmVzdGF1cmFudC1pbmZvLW1vZGFsLXJvb3RcIj48L2Rpdj5cclxuICAgICAgPC9tYWluPlxyXG4gICAgYDtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfcGFyZW50RWxlbWVudCwgXCJmXCIpLmlubmVySFRNTCA9IHRlbXBsYXRlO1xufSwgX0x1bmNoQXBwVmlld19yZW5kZXJDaGlsZCA9IGZ1bmN0aW9uIF9MdW5jaEFwcFZpZXdfcmVuZGVyQ2hpbGQocmVzdGF1cmFudHMpIHtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfaW5zdGFuY2VzLCBcIm1cIiwgX0x1bmNoQXBwVmlld19yZW5kZXJIZWFkZXIpLmNhbGwodGhpcyk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBWaWV3X2luc3RhbmNlcywgXCJtXCIsIF9MdW5jaEFwcFZpZXdfcmVuZGVyRmlsdGVyKS5jYWxsKHRoaXMpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwVmlld19pbnN0YW5jZXMsIFwibVwiLCBfTHVuY2hBcHBWaWV3X3JlbmRlclJlc3RhdXJhbnRzKS5jYWxsKHRoaXMsIHJlc3RhdXJhbnRzKTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfaW5zdGFuY2VzLCBcIm1cIiwgX0x1bmNoQXBwVmlld19yZW5kZXJBZGRNb2RhbCkuY2FsbCh0aGlzKTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfaW5zdGFuY2VzLCBcIm1cIiwgX0x1bmNoQXBwVmlld19yZW5kZXJJbmZvTW9kYWwpLmNhbGwodGhpcyk7XG59LCBfTHVuY2hBcHBWaWV3X3JlbmRlckhlYWRlciA9IGZ1bmN0aW9uIF9MdW5jaEFwcFZpZXdfcmVuZGVySGVhZGVyKCkge1xuICAgIG5ldyBIZWFkZXIoe1xuICAgICAgICBwYXJlbnRFbGVtZW50OiAkKCcjaGVhZGVyLXJvb3QnKSxcbiAgICAgICAgcGFyZW50RXZlbnQ6IHtcbiAgICAgICAgICAgIG9uSGVhZGVyQWRkQnV0dG9uQ2xpY2tlZDogKCkgPT4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBWaWV3X3BhcmVudEV2ZW50LCBcImZcIikub25IZWFkZXJBZGRCdXR0b25DbGlja2VkKCksXG4gICAgICAgIH0sXG4gICAgfSk7XG59LCBfTHVuY2hBcHBWaWV3X3JlbmRlckZpbHRlciA9IGZ1bmN0aW9uIF9MdW5jaEFwcFZpZXdfcmVuZGVyRmlsdGVyKCkge1xuICAgIG5ldyBSZXN0YXVyYW50RmlsdGVyKHtcbiAgICAgICAgcGFyZW50RWxlbWVudDogJCgnI2ZpbHRlci1yb290JyksXG4gICAgICAgIHBhcmVudEV2ZW50OiB7XG4gICAgICAgICAgICBvbkZpbHRlckJ5Q2hhbmdlOiAoZmlsdGVyQnkpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwVmlld19wYXJlbnRFdmVudCwgXCJmXCIpLm9uRmlsdGVyQnlDaGFuZ2UoZmlsdGVyQnkpLFxuICAgICAgICAgICAgb25Tb3J0QnlDaGFuZ2U6IChzb3J0QnkpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwVmlld19wYXJlbnRFdmVudCwgXCJmXCIpLm9uU29ydEJ5Q2hhbmdlKHNvcnRCeSksXG4gICAgICAgICAgICBvbkZhdm9yaXRlQnlDaGFuZ2U6IChmYXZvcml0ZU1vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfcGFyZW50RXZlbnQsIFwiZlwiKS5vbkZhdm9yaXRlQnlDaGFuZ2UoZmF2b3JpdGVNb2RlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSk7XG59LCBfTHVuY2hBcHBWaWV3X3JlbmRlclJlc3RhdXJhbnRzID0gZnVuY3Rpb24gX0x1bmNoQXBwVmlld19yZW5kZXJSZXN0YXVyYW50cyhyZXN0YXVyYW50cykge1xuICAgIG5ldyBSZXN0YXVyYW50TGlzdCh7XG4gICAgICAgIHBhcmVudEVsZW1lbnQ6ICQoJyNyZXN0YXVyYW50LWxpc3Qtcm9vdCcpLFxuICAgICAgICByZXN0YXVyYW50czogcmVzdGF1cmFudHMsXG4gICAgICAgIHBhcmVudEV2ZW50OiB7XG4gICAgICAgICAgICBvblJlc3RhdXJhbnRJdGVtQ2xpY2tlZDogKGluZGV4KSA9PiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfcGFyZW50RXZlbnQsIFwiZlwiKS5vblJlc3RhdXJhbnRJdGVtQ2xpY2tlZChpbmRleCksXG4gICAgICAgICAgICBvbkZhdm9yaXRlQnV0dG9uQ2xpY2tlZDogKGluZGV4KSA9PiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfcGFyZW50RXZlbnQsIFwiZlwiKS5vbkZhdm9yaXRlQnV0dG9uQ2xpY2tlZChpbmRleCksXG4gICAgICAgIH0sXG4gICAgfSk7XG59LCBfTHVuY2hBcHBWaWV3X3JlbmRlckFkZE1vZGFsID0gZnVuY3Rpb24gX0x1bmNoQXBwVmlld19yZW5kZXJBZGRNb2RhbCgpIHtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfcmVzdGF1cmFudEFkZE1vZGFsLCBuZXcgUmVzdGF1cmFudEFkZE1vZGFsKHtcbiAgICAgICAgcGFyZW50RWxlbWVudDogJCgnI3Jlc3RhdXJhbnQtYWRkLW1vZGFsLXJvb3QnKSxcbiAgICAgICAgcGFyZW50RXZlbnQ6IHtcbiAgICAgICAgICAgIG9uTW9kYWxDYW5jZWxCdXR0b25DbGlja2VkOiAoKSA9PiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcFZpZXdfcGFyZW50RXZlbnQsIFwiZlwiKS5vbk1vZGFsQ2FuY2VsQnV0dG9uQ2xpY2tlZCgpLFxuICAgICAgICAgICAgb25Nb2RhbEFkZEJ1dHRvbkNsaWNrZWQ6IChyZXN0YXVyYW50RGF0YSkgPT4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBWaWV3X3BhcmVudEV2ZW50LCBcImZcIikub25Nb2RhbEFkZEJ1dHRvbkNsaWNrZWQocmVzdGF1cmFudERhdGEpLFxuICAgICAgICB9LFxuICAgIH0pLCBcImZcIik7XG59LCBfTHVuY2hBcHBWaWV3X3JlbmRlckluZm9Nb2RhbCA9IGZ1bmN0aW9uIF9MdW5jaEFwcFZpZXdfcmVuZGVySW5mb01vZGFsKCkge1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0x1bmNoQXBwVmlld19yZXN0YXVyYW50SW5mb01vZGFsLCBuZXcgUmVzdGF1cmFudEluZm9Nb2RhbCh7XG4gICAgICAgIHBhcmVudEVsZW1lbnQ6ICQoJyNyZXN0YXVyYW50LWluZm8tbW9kYWwtcm9vdCcpLFxuICAgICAgICBwYXJlbnRFdmVudDoge1xuICAgICAgICAgICAgb25GYXZvcml0ZUJ1dHRvbkNsaWNrZWQ6IChpdGVtSWQpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwVmlld19wYXJlbnRFdmVudCwgXCJmXCIpLm9uRmF2b3JpdGVCdXR0b25DbGlja2VkKGl0ZW1JZCksXG4gICAgICAgICAgICBvbkRlbGV0ZUJ1dHRvbkNsaWNrZWQ6IChpdGVtSWQpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwVmlld19wYXJlbnRFdmVudCwgXCJmXCIpLm9uRGVsZXRlQnV0dG9uQ2xpY2tlZChpdGVtSWQpLFxuICAgICAgICB9LFxuICAgIH0pLCBcImZcIik7XG59O1xuZXhwb3J0IGRlZmF1bHQgTHVuY2hBcHBWaWV3O1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3RhdXJhbnRTZWFyY2hlcl9pbnN0YW5jZXMsIF9SZXN0YXVyYW50U2VhcmNoZXJfZ2V0RmF2b3JpdGVSZXN0YXVyYW50cywgX1Jlc3RhdXJhbnRTZWFyY2hlcl9nZXRGaWx0ZXJlZFJlc3RhdXJhbnRzQnlDYXRlZ29yeSwgX1Jlc3RhdXJhbnRTZWFyY2hlcl9nZXRTb3J0ZWRSZXN0YXVyYW50cztcbmNsYXNzIFJlc3RhdXJhbnRTZWFyY2hlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIF9SZXN0YXVyYW50U2VhcmNoZXJfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog7JqU7LKt7ZWcIO2VhO2EsOungSDsmLXshZjsnbQg7KaQ6rKo7LC+6riw7ZWcIOugiOyKpO2GoOuekeydvCDqsr3smrAg7KaQ6rKo7LC+6riw65CcIOugiOyKpO2GoOuekeydhCDrsJjtmZjtlZjqs6AsXG4gICAgICog6re466CH7KeAIOyViuydhCDqsr3smrDsl5DripQg7Lm07YWM6rOg66asL+ygleugrCDsmLXshZjsnLzroZwg7ZWE7YSw66eB7ZWcIOugiOyKpO2GoOuekeydhCDrsJjtmZjtlanri4jri6QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVzdGF1cmFudHMgLSDqsoDsg4nsnYQg7Iuk7ZaJ7ZWgIOugiOyKpO2GoOuekSDrqqnroZ1cbiAgICAgKiBAcGFyYW0gZmlsdGVyUHJvcGVydGllcyAtIO2VhO2EsOungSDsmLXshZhcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHNlYXJjaChyZXN0YXVyYW50cywgZmlsdGVyUHJvcGVydGllcykge1xuICAgICAgICBpZiAoZmlsdGVyUHJvcGVydGllcy5mYXZvcml0ZUJ5ID09PSAnZmF2b3JpdGUnKSB7XG4gICAgICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudFNlYXJjaGVyX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50U2VhcmNoZXJfZ2V0RmF2b3JpdGVSZXN0YXVyYW50cykuY2FsbCh0aGlzLCByZXN0YXVyYW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsdGVyZWRSZXN0YXVyYW50cyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRTZWFyY2hlcl9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudFNlYXJjaGVyX2dldEZpbHRlcmVkUmVzdGF1cmFudHNCeUNhdGVnb3J5KS5jYWxsKHRoaXMsIHJlc3RhdXJhbnRzLCBmaWx0ZXJQcm9wZXJ0aWVzLmZpbHRlckJ5KTtcbiAgICAgICAgY29uc3Qgc29ydGVkUmVzdGF1cmFudHMgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50U2VhcmNoZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRTZWFyY2hlcl9nZXRTb3J0ZWRSZXN0YXVyYW50cykuY2FsbCh0aGlzLCBmaWx0ZXJlZFJlc3RhdXJhbnRzLCBmaWx0ZXJQcm9wZXJ0aWVzLnNvcnRCeSk7XG4gICAgICAgIHJldHVybiBzb3J0ZWRSZXN0YXVyYW50cztcbiAgICB9XG59XG5fUmVzdGF1cmFudFNlYXJjaGVyX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50U2VhcmNoZXJfZ2V0RmF2b3JpdGVSZXN0YXVyYW50cyA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50U2VhcmNoZXJfZ2V0RmF2b3JpdGVSZXN0YXVyYW50cyhyZXN0YXVyYW50cykge1xuICAgIHJldHVybiBbLi4ucmVzdGF1cmFudHNdLmZpbHRlcigocmVzdGF1cmFudCkgPT4gcmVzdGF1cmFudC5pc0Zhdm9yaXRlID09PSB0cnVlKTtcbn0sIF9SZXN0YXVyYW50U2VhcmNoZXJfZ2V0RmlsdGVyZWRSZXN0YXVyYW50c0J5Q2F0ZWdvcnkgPSBmdW5jdGlvbiBfUmVzdGF1cmFudFNlYXJjaGVyX2dldEZpbHRlcmVkUmVzdGF1cmFudHNCeUNhdGVnb3J5KHJlc3RhdXJhbnRzLCBjYXRlZ29yeSkge1xuICAgIHJldHVybiBjYXRlZ29yeSA9PT0gJ+yghOyytCdcbiAgICAgICAgPyByZXN0YXVyYW50c1xuICAgICAgICA6IFsuLi5yZXN0YXVyYW50c10uZmlsdGVyKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmNhdGVnb3J5ID09PSBjYXRlZ29yeSk7XG59LCBfUmVzdGF1cmFudFNlYXJjaGVyX2dldFNvcnRlZFJlc3RhdXJhbnRzID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRTZWFyY2hlcl9nZXRTb3J0ZWRSZXN0YXVyYW50cyhyZXN0YXVyYW50cywgc29ydEJ5KSB7XG4gICAgcmV0dXJuIHNvcnRCeSA9PT0gJ25hbWUnXG4gICAgICAgID8gWy4uLnJlc3RhdXJhbnRzXS5zb3J0KCh4LCB5KSA9PiB4Lm5hbWUubG9jYWxlQ29tcGFyZSh5Lm5hbWUpKVxuICAgICAgICA6IFsuLi5yZXN0YXVyYW50c10uc29ydCgoeCwgeSkgPT4gTnVtYmVyKHguZGlzdGFuY2VJbk1pbnV0ZXMpIC0gTnVtYmVyKHkuZGlzdGFuY2VJbk1pbnV0ZXMpKTtcbn07XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50U2VhcmNoZXI7XG4iLCJjb25zdCBzdG9yYWdlID0ge1xuICAgIGdldERhdGEoa2V5KSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSA9PT0gbnVsbCA/IG51bGwgOiBKU09OLnBhcnNlKGRhdGEpO1xuICAgIH0sXG4gICAgc2V0RGF0YShrZXksIG5ld0RhdGEpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShuZXdEYXRhKSk7XG4gICAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCBzdG9yYWdlO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9SZXN0YXVyYW50c19pbnN0YW5jZXMsIF9SZXN0YXVyYW50c19yZXN0YXVyYW50cywgX1Jlc3RhdXJhbnRzX2lkLCBfUmVzdGF1cmFudHNfcmVzdGF1cmFudFNlYXJjaGVyLCBfUmVzdGF1cmFudHNfZmlsdGVyUHJvcGVydGllcywgX1Jlc3RhdXJhbnRzX3RyaW1MaW5rLCBfUmVzdGF1cmFudHNfZ2V0UmVzdGF1cmFudEluZGV4QnlJZDtcbmltcG9ydCB7IExPQ0FMX1NUT1JBR0VfS0VZIH0gZnJvbSAnLi4vY29uc3RhbnQnO1xuaW1wb3J0IFJlc3RhdXJhbnRTZWFyY2hlciBmcm9tICcuL1Jlc3RhdXJhbnRTZWFyY2hlcic7XG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuLi91dGlsL3N0b3JhZ2UnO1xuY2xhc3MgUmVzdGF1cmFudHMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBfUmVzdGF1cmFudHNfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRzLnNldCh0aGlzLCAoc3RvcmFnZS5nZXREYXRhKExPQ0FMX1NUT1JBR0VfS0VZKSB8fCBbXSkucmVzdGF1cmFudHMgfHwgW10pO1xuICAgICAgICBfUmVzdGF1cmFudHNfaWQuc2V0KHRoaXMsIChzdG9yYWdlLmdldERhdGEoTE9DQUxfU1RPUkFHRV9LRVkpIHx8IFtdKS5pZCB8fCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRTZWFyY2hlci5zZXQodGhpcywgbmV3IFJlc3RhdXJhbnRTZWFyY2hlcigpKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRzX2ZpbHRlclByb3BlcnRpZXMuc2V0KHRoaXMsIHsgZmlsdGVyQnk6ICfsoITssrQnLCBzb3J0Qnk6ICduYW1lJywgZmF2b3JpdGVCeTogJ2FsbCcgfSk7XG4gICAgfVxuICAgIGFkZFJlc3RhdXJhbnQocmVzdGF1cmFudElucHV0KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRzLCBcImZcIikucHVzaCh7XG4gICAgICAgICAgICAuLi5yZXN0YXVyYW50SW5wdXQsXG4gICAgICAgICAgICBpc0Zhdm9yaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIGl0ZW1JZDogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudHNfaWQsIFwiZlwiKSxcbiAgICAgICAgICAgIGxpbms6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50c190cmltTGluaykuY2FsbCh0aGlzLCByZXN0YXVyYW50SW5wdXQubGluayksXG4gICAgICAgIH0pO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50c19pZCwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudHNfaWQsIFwiZlwiKSArIDEsIFwiZlwiKTtcbiAgICB9XG4gICAgZ2V0UmVzdGF1cmFudHMoKSB7XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50c19yZXN0YXVyYW50U2VhcmNoZXIsIFwiZlwiKS5zZWFyY2goX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudHNfcmVzdGF1cmFudHMsIFwiZlwiKSwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudHNfZmlsdGVyUHJvcGVydGllcywgXCJmXCIpKTtcbiAgICB9XG4gICAgc2F2ZVJlc3RhdXJhbnRzVG9Mb2NhbFN0b3JhZ2UoKSB7XG4gICAgICAgIHN0b3JhZ2Uuc2V0RGF0YShMT0NBTF9TVE9SQUdFX0tFWSwge1xuICAgICAgICAgICAgcmVzdGF1cmFudHM6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRzLCBcImZcIiksXG4gICAgICAgICAgICBpZDogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudHNfaWQsIFwiZlwiKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldEZpbHRlckJ5KGZpbHRlckJ5KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX2ZpbHRlclByb3BlcnRpZXMsIFwiZlwiKS5maWx0ZXJCeSA9IGZpbHRlckJ5O1xuICAgIH1cbiAgICBzZXRTb3J0Qnkoc29ydEJ5KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX2ZpbHRlclByb3BlcnRpZXMsIFwiZlwiKS5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgfVxuICAgIHNldEZhdm9yaXRlQnkoZmF2b3JpdGVCeSkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50c19maWx0ZXJQcm9wZXJ0aWVzLCBcImZcIikuZmF2b3JpdGVCeSA9IGZhdm9yaXRlQnk7XG4gICAgfVxuICAgIHRvZ2dsZUZhdm9yaXRlKGl0ZW1JZCkge1xuICAgICAgICBjb25zdCBzZWFyY2hlZEluZGV4ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudHNfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRzX2dldFJlc3RhdXJhbnRJbmRleEJ5SWQpLmNhbGwodGhpcywgaXRlbUlkKTtcbiAgICAgICAgaWYgKGl0ZW1JZCAhPT0gLTEpIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRzLCBcImZcIilbc2VhcmNoZWRJbmRleF0uaXNGYXZvcml0ZVxuICAgICAgICAgICAgICAgID8gKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRzLCBcImZcIilbc2VhcmNoZWRJbmRleF0uaXNGYXZvcml0ZSA9IGZhbHNlKVxuICAgICAgICAgICAgICAgIDogKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRzLCBcImZcIilbc2VhcmNoZWRJbmRleF0uaXNGYXZvcml0ZSA9IHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFJlc3RhdXJhbnRCeUlkKGl0ZW1JZCkge1xuICAgICAgICBjb25zdCBzZWFyY2hlZEluZGV4ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudHNfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRzX2dldFJlc3RhdXJhbnRJbmRleEJ5SWQpLmNhbGwodGhpcywgaXRlbUlkKTtcbiAgICAgICAgaWYgKHNlYXJjaGVkSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcign642w7J207YSw66W8IOu2iOufrOyYpOuKlCDspJEg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4g7Y6Y7J207KeA66W8IOyDiOuhnOqzoOy5qCDtlbQg7KO87IS47JqULicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50c19yZXN0YXVyYW50cywgXCJmXCIpW3NlYXJjaGVkSW5kZXhdO1xuICAgIH1cbiAgICBkZWxldGVSZXN0YXVyYW50QnlJZChpdGVtSWQpIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoZWRJbmRleCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50c19nZXRSZXN0YXVyYW50SW5kZXhCeUlkKS5jYWxsKHRoaXMsIGl0ZW1JZCk7XG4gICAgICAgIGlmIChzZWFyY2hlZEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudHNfcmVzdGF1cmFudHMsIFwiZlwiKS5zcGxpY2Uoc2VhcmNoZWRJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5fUmVzdGF1cmFudHNfcmVzdGF1cmFudHMgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudHNfaWQgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudHNfcmVzdGF1cmFudFNlYXJjaGVyID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRzX2ZpbHRlclByb3BlcnRpZXMgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudHNfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1Jlc3RhdXJhbnRzX3RyaW1MaW5rID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRzX3RyaW1MaW5rKGxpbmspIHtcbiAgICByZXR1cm4gYCR7bGluay5zdGFydHNXaXRoKCdodHRwczovLycpIHx8IGxpbmsuc3RhcnRzV2l0aCgnaHR0cDovLycpXG4gICAgICAgID8gJydcbiAgICAgICAgOiAnaHR0cHM6Ly8nfSR7bGlua31gO1xufSwgX1Jlc3RhdXJhbnRzX2dldFJlc3RhdXJhbnRJbmRleEJ5SWQgPSBmdW5jdGlvbiBfUmVzdGF1cmFudHNfZ2V0UmVzdGF1cmFudEluZGV4QnlJZChpdGVtSWQpIHtcbiAgICBsZXQgc2VhcmNoZWRJbmRleCA9IC0xO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRzLCBcImZcIikuZm9yRWFjaCgocmVzdGF1cmFudCwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKHJlc3RhdXJhbnQuaXRlbUlkID09PSBpdGVtSWQpIHtcbiAgICAgICAgICAgIHNlYXJjaGVkSW5kZXggPSBpbmRleDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWFyY2hlZEluZGV4O1xufTtcbmV4cG9ydCBkZWZhdWx0IFJlc3RhdXJhbnRzO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1ZhbGlkYXRvcl9pbnN0YW5jZXMsIF9WYWxpZGF0b3JfZXJyb3JJZkludmFsaWRDYXRlZ29yeSwgX1ZhbGlkYXRvcl9lcnJvcklmRW1wdHlOYW1lLCBfVmFsaWRhdG9yX2Vycm9ySWZJbnZhbGlkRGlzdGFuY2VJbk1pbnV0ZXMsIF9WYWxpZGF0b3JfZXJyb3JJZkludmFsaWRMaW5rO1xuaW1wb3J0IHsgUkVHRVgsIFJFU1RBVVJBTlRfQ0FURUdPUklFUywgRVJST1JfTUVTU0FHRSwgfSBmcm9tICcuLi9jb25zdGFudC8nO1xuY2xhc3MgVmFsaWRhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgX1ZhbGlkYXRvcl9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgIH1cbiAgICBlcnJvcklmSW52YWxpZFJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9WYWxpZGF0b3JfaW5zdGFuY2VzLCBcIm1cIiwgX1ZhbGlkYXRvcl9lcnJvcklmSW52YWxpZENhdGVnb3J5KS5jYWxsKHRoaXMsIHJlc3RhdXJhbnQuY2F0ZWdvcnkpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9WYWxpZGF0b3JfaW5zdGFuY2VzLCBcIm1cIiwgX1ZhbGlkYXRvcl9lcnJvcklmRW1wdHlOYW1lKS5jYWxsKHRoaXMsIHJlc3RhdXJhbnQubmFtZSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1ZhbGlkYXRvcl9pbnN0YW5jZXMsIFwibVwiLCBfVmFsaWRhdG9yX2Vycm9ySWZJbnZhbGlkRGlzdGFuY2VJbk1pbnV0ZXMpLmNhbGwodGhpcywgcmVzdGF1cmFudC5kaXN0YW5jZUluTWludXRlcyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1ZhbGlkYXRvcl9pbnN0YW5jZXMsIFwibVwiLCBfVmFsaWRhdG9yX2Vycm9ySWZJbnZhbGlkTGluaykuY2FsbCh0aGlzLCByZXN0YXVyYW50LmxpbmspO1xuICAgIH1cbn1cbl9WYWxpZGF0b3JfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1ZhbGlkYXRvcl9lcnJvcklmSW52YWxpZENhdGVnb3J5ID0gZnVuY3Rpb24gX1ZhbGlkYXRvcl9lcnJvcklmSW52YWxpZENhdGVnb3J5KGNhdGVnb3J5KSB7XG4gICAgaWYgKCFSRVNUQVVSQU5UX0NBVEVHT1JJRVMuaW5jbHVkZXMoY2F0ZWdvcnkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFLmNhdGVnb3J5SXNFbXB0eSk7XG4gICAgfVxufSwgX1ZhbGlkYXRvcl9lcnJvcklmRW1wdHlOYW1lID0gZnVuY3Rpb24gX1ZhbGlkYXRvcl9lcnJvcklmRW1wdHlOYW1lKG5hbWUpIHtcbiAgICBpZiAobmFtZS50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFLm5hbWVJc0VtcHR5KTtcbiAgICB9XG59LCBfVmFsaWRhdG9yX2Vycm9ySWZJbnZhbGlkRGlzdGFuY2VJbk1pbnV0ZXMgPSBmdW5jdGlvbiBfVmFsaWRhdG9yX2Vycm9ySWZJbnZhbGlkRGlzdGFuY2VJbk1pbnV0ZXMoZGlzdGFuY2VJbk1pbnV0ZXMpIHtcbiAgICBpZiAoZGlzdGFuY2VJbk1pbnV0ZXMudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRS5kaXN0YW5jZUluTWludXRlc0lzRW1wdHkpO1xuICAgIH1cbn0sIF9WYWxpZGF0b3JfZXJyb3JJZkludmFsaWRMaW5rID0gZnVuY3Rpb24gX1ZhbGlkYXRvcl9lcnJvcklmSW52YWxpZExpbmsobGluaykge1xuICAgIGlmICghUkVHRVgubGluay50ZXN0KGxpbmspKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFLmxpbmtJc0ludmFsaWQpO1xuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCBWYWxpZGF0b3I7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfTHVuY2hBcHBfaW5zdGFuY2VzLCBfTHVuY2hBcHBfcmVzdGF1cmFudHMsIF9MdW5jaEFwcF92YWxpZGF0b3IsIF9MdW5jaEFwcF9sdW5jaEFwcFZpZXcsIF9MdW5jaEFwcF9vbk1vZGFsQ2FuY2VsQnV0dG9uQ2xpY2tlZCwgX0x1bmNoQXBwX29uTW9kYWxBZGRCdXR0b25DbGlja2VkLCBfTHVuY2hBcHBfb25IZWFkZXJBZGRCdXR0b25DbGlja2VkLCBfTHVuY2hBcHBfb25GaWx0ZXJCeUNoYW5nZSwgX0x1bmNoQXBwX29uU29ydEJ5Q2hhbmdlLCBfTHVuY2hBcHBfb25GYXZvcml0ZUJ5Q2hhbmdlLCBfTHVuY2hBcHBfb25SZXN0YXVyYW50SXRlbUNsaWNrZWQsIF9MdW5jaEFwcF9vbkZhdm9yaXRlQnV0dG9uQ2xpY2tlZCwgX0x1bmNoQXBwX29uRGVsZXRlQnV0dG9uQ2xpY2tlZDtcbmltcG9ydCBMdW5jaEFwcFZpZXcgZnJvbSAnLi4vdmlldy9MdW5jaEFwcFZpZXcnO1xuaW1wb3J0IFJlc3RhdXJhbnRzIGZyb20gJy4uL2RvbWFpbi9SZXN0YXVyYW50cyc7XG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gJy4uL2RvbWFpbi9WYWxpZGF0b3InO1xuaW1wb3J0IHsgJCB9IGZyb20gJy4uL3V0aWwvcXVlcnlTZWxlY3Rvcic7XG5jbGFzcyBMdW5jaEFwcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIF9MdW5jaEFwcF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfTHVuY2hBcHBfcmVzdGF1cmFudHMuc2V0KHRoaXMsIG5ldyBSZXN0YXVyYW50cygpKTtcbiAgICAgICAgX0x1bmNoQXBwX3ZhbGlkYXRvci5zZXQodGhpcywgbmV3IFZhbGlkYXRvcigpKTtcbiAgICAgICAgX0x1bmNoQXBwX2x1bmNoQXBwVmlldy5zZXQodGhpcywgbmV3IEx1bmNoQXBwVmlldyh7XG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50OiAkKCcjcm9vdCcpLFxuICAgICAgICAgICAgcmVzdGF1cmFudHM6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX3Jlc3RhdXJhbnRzLCBcImZcIikuZ2V0UmVzdGF1cmFudHMoKSxcbiAgICAgICAgICAgIHBhcmVudEV2ZW50OiB7XG4gICAgICAgICAgICAgICAgb25Nb2RhbENhbmNlbEJ1dHRvbkNsaWNrZWQ6ICgpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX2luc3RhbmNlcywgXCJtXCIsIF9MdW5jaEFwcF9vbk1vZGFsQ2FuY2VsQnV0dG9uQ2xpY2tlZCkuY2FsbCh0aGlzKSxcbiAgICAgICAgICAgICAgICBvbk1vZGFsQWRkQnV0dG9uQ2xpY2tlZDogKHJlc3RhdXJhbnREYXRhKSA9PiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfTHVuY2hBcHBfb25Nb2RhbEFkZEJ1dHRvbkNsaWNrZWQpLmNhbGwodGhpcywgcmVzdGF1cmFudERhdGEpLFxuICAgICAgICAgICAgICAgIG9uSGVhZGVyQWRkQnV0dG9uQ2xpY2tlZDogKCkgPT4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0x1bmNoQXBwX29uSGVhZGVyQWRkQnV0dG9uQ2xpY2tlZCkuY2FsbCh0aGlzKSxcbiAgICAgICAgICAgICAgICBvbkZpbHRlckJ5Q2hhbmdlOiAoZmlsdGVyQnkpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX2luc3RhbmNlcywgXCJtXCIsIF9MdW5jaEFwcF9vbkZpbHRlckJ5Q2hhbmdlKS5jYWxsKHRoaXMsIGZpbHRlckJ5KSxcbiAgICAgICAgICAgICAgICBvblNvcnRCeUNoYW5nZTogKHNvcnRCeSkgPT4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0x1bmNoQXBwX29uU29ydEJ5Q2hhbmdlKS5jYWxsKHRoaXMsIHNvcnRCeSksXG4gICAgICAgICAgICAgICAgb25SZXN0YXVyYW50SXRlbUNsaWNrZWQ6IChpdGVtSWQpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX2luc3RhbmNlcywgXCJtXCIsIF9MdW5jaEFwcF9vblJlc3RhdXJhbnRJdGVtQ2xpY2tlZCkuY2FsbCh0aGlzLCBpdGVtSWQpLFxuICAgICAgICAgICAgICAgIG9uRmF2b3JpdGVCdXR0b25DbGlja2VkOiAoaXRlbUlkKSA9PiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9pbnN0YW5jZXMsIFwibVwiLCBfTHVuY2hBcHBfb25GYXZvcml0ZUJ1dHRvbkNsaWNrZWQpLmNhbGwodGhpcywgaXRlbUlkKSxcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZUJ1dHRvbkNsaWNrZWQ6IChpdGVtSWQpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX2luc3RhbmNlcywgXCJtXCIsIF9MdW5jaEFwcF9vbkRlbGV0ZUJ1dHRvbkNsaWNrZWQpLmNhbGwodGhpcywgaXRlbUlkKSxcbiAgICAgICAgICAgICAgICBvbkZhdm9yaXRlQnlDaGFuZ2U6IChmYXZvcml0ZU1vZGUpID0+IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX2luc3RhbmNlcywgXCJtXCIsIF9MdW5jaEFwcF9vbkZhdm9yaXRlQnlDaGFuZ2UpLmNhbGwodGhpcywgZmF2b3JpdGVNb2RlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5fTHVuY2hBcHBfcmVzdGF1cmFudHMgPSBuZXcgV2Vha01hcCgpLCBfTHVuY2hBcHBfdmFsaWRhdG9yID0gbmV3IFdlYWtNYXAoKSwgX0x1bmNoQXBwX2x1bmNoQXBwVmlldyA9IG5ldyBXZWFrTWFwKCksIF9MdW5jaEFwcF9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfTHVuY2hBcHBfb25Nb2RhbENhbmNlbEJ1dHRvbkNsaWNrZWQgPSBmdW5jdGlvbiBfTHVuY2hBcHBfb25Nb2RhbENhbmNlbEJ1dHRvbkNsaWNrZWQoKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfbHVuY2hBcHBWaWV3LCBcImZcIikuY2xvc2VPck9wZW5SZXN0YXVyYW50QWRkTW9kYWwoJ2Nsb3NlJyk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfbHVuY2hBcHBWaWV3LCBcImZcIikuY2xlYXJBbGxNb2RhbElucHV0cygpO1xufSwgX0x1bmNoQXBwX29uTW9kYWxBZGRCdXR0b25DbGlja2VkID0gZnVuY3Rpb24gX0x1bmNoQXBwX29uTW9kYWxBZGRCdXR0b25DbGlja2VkKHJlc3RhdXJhbnREYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfdmFsaWRhdG9yLCBcImZcIikuZXJyb3JJZkludmFsaWRSZXN0YXVyYW50KHJlc3RhdXJhbnREYXRhKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfcmVzdGF1cmFudHMsIFwiZlwiKS5hZGRSZXN0YXVyYW50KHJlc3RhdXJhbnREYXRhKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfcmVzdGF1cmFudHMsIFwiZlwiKS5zYXZlUmVzdGF1cmFudHNUb0xvY2FsU3RvcmFnZSgpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9sdW5jaEFwcFZpZXcsIFwiZlwiKS51cGRhdGVSZXN0YXVyYW50cyhfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9yZXN0YXVyYW50cywgXCJmXCIpLmdldFJlc3RhdXJhbnRzKCkpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9sdW5jaEFwcFZpZXcsIFwiZlwiKS5jbGVhckFsbE1vZGFsSW5wdXRzKCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX2x1bmNoQXBwVmlldywgXCJmXCIpLmNsb3NlT3JPcGVuUmVzdGF1cmFudEFkZE1vZGFsKCdjbG9zZScpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9sdW5jaEFwcFZpZXcsIFwiZlwiKS5oaWRlUmVzdGF1cmFudEFkZE1vZGFsRXJyb3JNZXNzYWdlKCk7XG4gICAgfVxuICAgIGNhdGNoICh7IG1lc3NhZ2UgfSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9sdW5jaEFwcFZpZXcsIFwiZlwiKS5zaG93UmVzdGF1cmFudEFkZE1vZGFsRXJyb3JNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxufSwgX0x1bmNoQXBwX29uSGVhZGVyQWRkQnV0dG9uQ2xpY2tlZCA9IGZ1bmN0aW9uIF9MdW5jaEFwcF9vbkhlYWRlckFkZEJ1dHRvbkNsaWNrZWQoKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfbHVuY2hBcHBWaWV3LCBcImZcIikuY2xvc2VPck9wZW5SZXN0YXVyYW50QWRkTW9kYWwoJ29wZW4nKTtcbn0sIF9MdW5jaEFwcF9vbkZpbHRlckJ5Q2hhbmdlID0gZnVuY3Rpb24gX0x1bmNoQXBwX29uRmlsdGVyQnlDaGFuZ2UoZmlsdGVyQnkpIHtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9yZXN0YXVyYW50cywgXCJmXCIpLnNldEZpbHRlckJ5KGZpbHRlckJ5KTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9sdW5jaEFwcFZpZXcsIFwiZlwiKS51cGRhdGVSZXN0YXVyYW50cyhfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9yZXN0YXVyYW50cywgXCJmXCIpLmdldFJlc3RhdXJhbnRzKCkpO1xufSwgX0x1bmNoQXBwX29uU29ydEJ5Q2hhbmdlID0gZnVuY3Rpb24gX0x1bmNoQXBwX29uU29ydEJ5Q2hhbmdlKHNvcnRCeSkge1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX3Jlc3RhdXJhbnRzLCBcImZcIikuc2V0U29ydEJ5KHNvcnRCeSk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfbHVuY2hBcHBWaWV3LCBcImZcIikudXBkYXRlUmVzdGF1cmFudHMoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfcmVzdGF1cmFudHMsIFwiZlwiKS5nZXRSZXN0YXVyYW50cygpKTtcbn0sIF9MdW5jaEFwcF9vbkZhdm9yaXRlQnlDaGFuZ2UgPSBmdW5jdGlvbiBfTHVuY2hBcHBfb25GYXZvcml0ZUJ5Q2hhbmdlKGZhdm9yaXRlQnkpIHtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9yZXN0YXVyYW50cywgXCJmXCIpLnNldEZhdm9yaXRlQnkoZmF2b3JpdGVCeSk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfbHVuY2hBcHBWaWV3LCBcImZcIikudXBkYXRlUmVzdGF1cmFudHMoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfcmVzdGF1cmFudHMsIFwiZlwiKS5nZXRSZXN0YXVyYW50cygpKTtcbn0sIF9MdW5jaEFwcF9vblJlc3RhdXJhbnRJdGVtQ2xpY2tlZCA9IGZ1bmN0aW9uIF9MdW5jaEFwcF9vblJlc3RhdXJhbnRJdGVtQ2xpY2tlZChpdGVtSWQpIHtcbiAgICBjb25zdCByZXN0YXVyYW50ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfcmVzdGF1cmFudHMsIFwiZlwiKS5nZXRSZXN0YXVyYW50QnlJZChpdGVtSWQpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX2x1bmNoQXBwVmlldywgXCJmXCIpLnVwZGF0ZVJlc3RhdXJhbnRJbmZvKHJlc3RhdXJhbnQpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX2x1bmNoQXBwVmlldywgXCJmXCIpLmNsb3NlT3JPcGVuUmVzdGF1cmFudEluZm9Nb2RhbCgnb3BlbicpO1xufSwgX0x1bmNoQXBwX29uRmF2b3JpdGVCdXR0b25DbGlja2VkID0gZnVuY3Rpb24gX0x1bmNoQXBwX29uRmF2b3JpdGVCdXR0b25DbGlja2VkKGl0ZW1JZCkge1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX3Jlc3RhdXJhbnRzLCBcImZcIikudG9nZ2xlRmF2b3JpdGUoaXRlbUlkKTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9sdW5jaEFwcFZpZXcsIFwiZlwiKS51cGRhdGVSZXN0YXVyYW50cyhfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9yZXN0YXVyYW50cywgXCJmXCIpLmdldFJlc3RhdXJhbnRzKCkpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX2x1bmNoQXBwVmlldywgXCJmXCIpLnVwZGF0ZVJlc3RhdXJhbnRJbmZvKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX3Jlc3RhdXJhbnRzLCBcImZcIikuZ2V0UmVzdGF1cmFudEJ5SWQoaXRlbUlkKSk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfcmVzdGF1cmFudHMsIFwiZlwiKS5zYXZlUmVzdGF1cmFudHNUb0xvY2FsU3RvcmFnZSgpO1xufSwgX0x1bmNoQXBwX29uRGVsZXRlQnV0dG9uQ2xpY2tlZCA9IGZ1bmN0aW9uIF9MdW5jaEFwcF9vbkRlbGV0ZUJ1dHRvbkNsaWNrZWQoaXRlbUlkKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTHVuY2hBcHBfbHVuY2hBcHBWaWV3LCBcImZcIikuY2xvc2VPck9wZW5SZXN0YXVyYW50SW5mb01vZGFsKCdjbG9zZScpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX3Jlc3RhdXJhbnRzLCBcImZcIikuZGVsZXRlUmVzdGF1cmFudEJ5SWQoaXRlbUlkKTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9sdW5jaEFwcFZpZXcsIFwiZlwiKS51cGRhdGVSZXN0YXVyYW50cyhfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MdW5jaEFwcF9yZXN0YXVyYW50cywgXCJmXCIpLmdldFJlc3RhdXJhbnRzKCkpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0x1bmNoQXBwX3Jlc3RhdXJhbnRzLCBcImZcIikuc2F2ZVJlc3RhdXJhbnRzVG9Mb2NhbFN0b3JhZ2UoKTtcbn07XG5leHBvcnQgZGVmYXVsdCBMdW5jaEFwcDtcbiIsImltcG9ydCAnLi4vdGVtcGxhdGVzL3N0eWxlLmNzcyc7XG5pbXBvcnQgJy4uL3RlbXBsYXRlcyc7XG5pbXBvcnQgTHVuY2hBcHAgZnJvbSAnLi9jb250cm9sbGVyL0x1bmNoQXBwJztcbm5ldyBMdW5jaEFwcCgpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwibmMiLCIkIiwic2VsZWN0b3IiLCJzZWxlY3RlZEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsIl9IZWFkZXJfaW5zdGFuY2VzIiwiX0hlYWRlcl9wYXJlbnRFbGVtZW50IiwiX0hlYWRlcl9wYXJlbnRFdmVudCIsIl9IZWFkZXJfcmVuZGVyIiwiX0hlYWRlcl9hZGRMaXN0ZW5lcnMiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwicmVjZWl2ZXIiLCJzdGF0ZSIsInZhbHVlIiwia2luZCIsImYiLCJUeXBlRXJyb3IiLCJoYXMiLCJzZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwiV2Vha01hcCIsIldlYWtTZXQiLCJpbm5lckhUTUwiLCJhZGRFdmVudExpc3RlbmVyIiwib25IZWFkZXJBZGRCdXR0b25DbGlja2VkIiwiX1Jlc3RhdXJhbnRGaWx0ZXJfaW5zdGFuY2VzIiwiX1Jlc3RhdXJhbnRGaWx0ZXJfcGFyZW50RWxlbWVudCIsIl9SZXN0YXVyYW50RmlsdGVyX3BhcmVudEV2ZW50IiwiX1Jlc3RhdXJhbnRGaWx0ZXJfc2V0TGlzdGVuZXJzIiwiX1Jlc3RhdXJhbnRGaWx0ZXJfY2xvc2VPck9wZW5TZWxlY3RGaWx0ZXIiLCJfUmVzdGF1cmFudEZpbHRlcl9yZW5kZXIiLCJldmVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwibmV3Q2hvaWNlIiwib25GaWx0ZXJCeUNoYW5nZSIsIm9uU29ydEJ5Q2hhbmdlIiwiSFRNTElucHV0RWxlbWVudCIsIm9uRmF2b3JpdGVCeUNoYW5nZSIsImNvbW1hbmQiLCJkaXNwbGF5IiwiUkVHRVgiLCJmcmVlemUiLCJsaW5rIiwiQ0FURUdPUllfSU1BR0VfUEFUSCIsIkZBVk9SSVRFX0lNQUdFX1BBVEgiLCJzdGFycmVkIiwidW5zdGFycmVkIiwiUkVTVEFVUkFOVF9DQVRFR09SSUVTIiwiTE9DQUxfU1RPUkFHRV9LRVkiLCJfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzIiwiX1Jlc3RhdXJhbnRJdGVtX3BhcmVudEVsZW1lbnQiLCJfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCIsIl9SZXN0YXVyYW50SXRlbV9wYXJlbnRFdmVudCIsIl9SZXN0YXVyYW50SXRlbV9yZW5kZXIiLCJfUmVzdGF1cmFudEl0ZW1fc2V0TGlzdGVuZXJzIiwiX1Jlc3RhdXJhbnRJdGVtX3JlbW92ZVRlbXBvcmFyeUlkcyIsInRlbXBsYXRlIiwiaXRlbUlkIiwiY2F0ZWdvcnkiLCJpc0Zhdm9yaXRlIiwibmFtZSIsImRpc3RhbmNlSW5NaW51dGVzIiwiZGVzY3JpcHRpb24iLCJpbnNlcnRBZGphY2VudEhUTUwiLCJvbkl0ZW1DbGlja2VkIiwic3RvcFByb3BhZ2F0aW9uIiwib25GYXZvcml0ZUJ1dHRvbkNsaWNrZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjb25zdHJ1Y3RvciIsInBhcmVudEVsZW1lbnQiLCJyZXN0YXVyYW50IiwicGFyZW50RXZlbnQiLCJhZGQiLCJfUmVzdGF1cmFudExpc3RfaW5zdGFuY2VzIiwiX1Jlc3RhdXJhbnRMaXN0X3BhcmVudEVsZW1lbnQiLCJfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMiLCJfUmVzdGF1cmFudExpc3RfcGFyZW50RXZlbnQiLCJfUmVzdGF1cmFudExpc3RfcmVuZGVyIiwiX1Jlc3RhdXJhbnRMaXN0X3JlbmRlclJlc3RhdXJhbnRJdGVtcyIsImZvckVhY2giLCJjb25zb2xlIiwibG9nIiwib25SZXN0YXVyYW50SXRlbUNsaWNrZWQiLCJfTW9kYWxfaW5zdGFuY2VzIiwiX01vZGFsX3BhcmVudEVsZW1lbnQiLCJfTW9kYWxfaW5mbyIsIl9Nb2RhbF9yZW5kZXIiLCJfTW9kYWxfYWRkTGlzdGVuZXJzIiwiaW5uZXJJZCIsImNsb3NlT3JPcGVuTW9kYWwiLCJpbmZvIiwibW9kYWxFbGVtZW50IiwiSFRNTERpYWxvZ0VsZW1lbnQiLCJjbGFzc0xpc3QiLCJmaWxsQ29udGVudHMiLCJfVHdpbkJ1dHRvbnNfaW5zdGFuY2VzIiwiX1R3aW5CdXR0b25zX3BhcmVudEVsZW1lbnQiLCJfVHdpbkJ1dHRvbnNfaW5mbyIsIl9Ud2luQnV0dG9uc19wYXJlbnRFdmVudCIsIl9Ud2luQnV0dG9uc19yZW5kZXIiLCJfVHdpbkJ1dHRvbnNfYWRkTGlzdGVuZXJzIiwibGVmdEJ1dHRvbklkIiwibGVmdEJ1dHRvbk5hbWUiLCJyaWdodEJ1dHRvbklkIiwicmlnaHRCdXR0b25OYW1lIiwib25MZWZ0QnV0dG9uQ2xpY2tlZCIsIm9uUmlnaHRCdXR0b25DbGlja2VkIiwiX1Jlc3RhdXJhbnRBZGRNb2RhbF9pbnN0YW5jZXMiLCJfUmVzdGF1cmFudEFkZE1vZGFsX3BhcmVudEVsZW1lbnQiLCJfUmVzdGF1cmFudEFkZE1vZGFsX3BhcmVudEV2ZW50IiwiX1Jlc3RhdXJhbnRBZGRNb2RhbF9tb2RhbCIsIl9SZXN0YXVyYW50QWRkTW9kYWxfZmlsbENvbnRlbnRzSW5Nb2RhbCIsIl9SZXN0YXVyYW50QWRkTW9kYWxfc2V0TGlzdGVuZXJzIiwib25Nb2RhbENhbmNlbEJ1dHRvbkNsaWNrZWQiLCIkbW9kYWxBZGRGb3JtIiwicHJldmVudERlZmF1bHQiLCJIVE1MRm9ybUVsZW1lbnQiLCJyZXN0YXVyYW50RGF0YSIsImZvcm1FbGVtZW50IiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsIm9uTW9kYWxBZGRCdXR0b25DbGlja2VkIiwiX1Jlc3RhdXJhbnRJbmZvTW9kYWxfcGFyZW50RWxlbWVudCIsIl9SZXN0YXVyYW50SW5mb01vZGFsX3BhcmVudEV2ZW50IiwiX1Jlc3RhdXJhbnRJbmZvTW9kYWxfbW9kYWwiLCJfTHVuY2hBcHBWaWV3X2luc3RhbmNlcyIsIl9MdW5jaEFwcFZpZXdfcGFyZW50RWxlbWVudCIsIl9MdW5jaEFwcFZpZXdfcGFyZW50RXZlbnQiLCJfTHVuY2hBcHBWaWV3X3Jlc3RhdXJhbnRBZGRNb2RhbCIsIl9MdW5jaEFwcFZpZXdfcmVzdGF1cmFudEluZm9Nb2RhbCIsIl9MdW5jaEFwcFZpZXdfcmVuZGVyIiwiX0x1bmNoQXBwVmlld19yZW5kZXJDaGlsZCIsIl9MdW5jaEFwcFZpZXdfcmVuZGVySGVhZGVyIiwiX0x1bmNoQXBwVmlld19yZW5kZXJGaWx0ZXIiLCJfTHVuY2hBcHBWaWV3X3JlbmRlclJlc3RhdXJhbnRzIiwiX0x1bmNoQXBwVmlld19yZW5kZXJBZGRNb2RhbCIsIl9MdW5jaEFwcFZpZXdfcmVuZGVySW5mb01vZGFsIiwicmVzdGF1cmFudHMiLCJmaWx0ZXJCeSIsInNvcnRCeSIsImZhdm9yaXRlTW9kZSIsInNob3dFcnJvck1lc3NhZ2UiLCJtZXNzYWdlIiwib3BhY2l0eSIsImlubmVyVGV4dCIsImhpZGVFcnJvck1lc3NhZ2UiLCJjbGVhckFsbElucHV0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dCIsIkhUTUxUZXh0QXJlYUVsZW1lbnQiLCJ1cGRhdGVSZXN0YXVyYW50SW5mbyIsIm9uRGVsZXRlQnV0dG9uQ2xpY2tlZCIsIm9wZW5JbmZvTW9kYWwiLCJfUmVzdGF1cmFudFNlYXJjaGVyX2luc3RhbmNlcyIsIl9SZXN0YXVyYW50U2VhcmNoZXJfZ2V0RmF2b3JpdGVSZXN0YXVyYW50cyIsIl9SZXN0YXVyYW50U2VhcmNoZXJfZ2V0RmlsdGVyZWRSZXN0YXVyYW50c0J5Q2F0ZWdvcnkiLCJfUmVzdGF1cmFudFNlYXJjaGVyX2dldFNvcnRlZFJlc3RhdXJhbnRzIiwiZmlsdGVyIiwic29ydCIsIngiLCJ5IiwibG9jYWxlQ29tcGFyZSIsIk51bWJlciIsImdldERhdGEiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2UiLCJzZXREYXRhIiwibmV3RGF0YSIsInNldEl0ZW0iLCJfUmVzdGF1cmFudHNfaW5zdGFuY2VzIiwiX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRzIiwiX1Jlc3RhdXJhbnRzX2lkIiwiX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRTZWFyY2hlciIsIl9SZXN0YXVyYW50c19maWx0ZXJQcm9wZXJ0aWVzIiwiX1Jlc3RhdXJhbnRzX3RyaW1MaW5rIiwiX1Jlc3RhdXJhbnRzX2dldFJlc3RhdXJhbnRJbmRleEJ5SWQiLCJzdGFydHNXaXRoIiwic2VhcmNoZWRJbmRleCIsIl9WYWxpZGF0b3JfaW5zdGFuY2VzIiwiX1ZhbGlkYXRvcl9lcnJvcklmSW52YWxpZENhdGVnb3J5IiwiX1ZhbGlkYXRvcl9lcnJvcklmRW1wdHlOYW1lIiwiX1ZhbGlkYXRvcl9lcnJvcklmSW52YWxpZERpc3RhbmNlSW5NaW51dGVzIiwiX1ZhbGlkYXRvcl9lcnJvcklmSW52YWxpZExpbmsiLCJpbmNsdWRlcyIsInRyaW0iLCJ0ZXN0IiwiX0x1bmNoQXBwX2luc3RhbmNlcyIsIl9MdW5jaEFwcF9yZXN0YXVyYW50cyIsIl9MdW5jaEFwcF92YWxpZGF0b3IiLCJfTHVuY2hBcHBfbHVuY2hBcHBWaWV3IiwiX0x1bmNoQXBwX29uTW9kYWxDYW5jZWxCdXR0b25DbGlja2VkIiwiX0x1bmNoQXBwX29uTW9kYWxBZGRCdXR0b25DbGlja2VkIiwiX0x1bmNoQXBwX29uSGVhZGVyQWRkQnV0dG9uQ2xpY2tlZCIsIl9MdW5jaEFwcF9vbkZpbHRlckJ5Q2hhbmdlIiwiX0x1bmNoQXBwX29uU29ydEJ5Q2hhbmdlIiwiX0x1bmNoQXBwX29uRmF2b3JpdGVCeUNoYW5nZSIsIl9MdW5jaEFwcF9vblJlc3RhdXJhbnRJdGVtQ2xpY2tlZCIsIl9MdW5jaEFwcF9vbkZhdm9yaXRlQnV0dG9uQ2xpY2tlZCIsIl9MdW5jaEFwcF9vbkRlbGV0ZUJ1dHRvbkNsaWNrZWQiLCJjbG9zZU9yT3BlblJlc3RhdXJhbnRBZGRNb2RhbCIsImNsZWFyQWxsTW9kYWxJbnB1dHMiLCJlcnJvcklmSW52YWxpZFJlc3RhdXJhbnQiLCJhZGRSZXN0YXVyYW50Iiwic2F2ZVJlc3RhdXJhbnRzVG9Mb2NhbFN0b3JhZ2UiLCJ1cGRhdGVSZXN0YXVyYW50cyIsImdldFJlc3RhdXJhbnRzIiwiaGlkZVJlc3RhdXJhbnRBZGRNb2RhbEVycm9yTWVzc2FnZSIsInNob3dSZXN0YXVyYW50QWRkTW9kYWxFcnJvck1lc3NhZ2UiLCJzZXRGaWx0ZXJCeSIsInNldFNvcnRCeSIsImZhdm9yaXRlQnkiLCJzZXRGYXZvcml0ZUJ5IiwiZ2V0UmVzdGF1cmFudEJ5SWQiLCJjbG9zZU9yT3BlblJlc3RhdXJhbnRJbmZvTW9kYWwiLCJ0b2dnbGVGYXZvcml0ZSIsImRlbGV0ZVJlc3RhdXJhbnRCeUlkIiwic2VhcmNoIiwiZmlsdGVyUHJvcGVydGllcyIsImZpbHRlcmVkUmVzdGF1cmFudHMiLCJyZXN0YXVyYW50SW5wdXQiXSwic291cmNlUm9vdCI6IiJ9